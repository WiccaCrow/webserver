#include "Response.hpp"

const std::map<std::string, std::string>     
HTTP::Response::_ContType = HTTP::Response::initContType();

std::map<std::string, std::string>   HTTP::Response::initContType() {
    std::map<std::string, std::string> ContType;
    // application
    ContType.insert(std::make_pair("1d-interleaved-parityfec", "application/1d-interleaved-parityfec"));
    ContType.insert(std::make_pair("3gpdash-qoe-report+xml", "application/3gpdash-qoe-report+xml"));
    ContType.insert(std::make_pair("3gppHal+json", "application/3gppHal+json"));
    ContType.insert(std::make_pair("3gppHalForms+json", "application/3gppHalForms+json"));
    ContType.insert(std::make_pair("3gpp-ims+xml", "application/3gpp-ims+xml"));
    ContType.insert(std::make_pair("A2L", "application/A2L"));
    ContType.insert(std::make_pair("ace+cbor", "application/ace+cbor"));
    ContType.insert(std::make_pair("activemessage", "application/activemessage"));
    ContType.insert(std::make_pair("activity+json", "application/activity+json"));
    ContType.insert(std::make_pair("alto-costmap+json", "application/alto-costmap+json"));
    ContType.insert(std::make_pair("alto-costmapfilter+json", "application/alto-costmapfilter+json"));
    ContType.insert(std::make_pair("alto-directory+json", "application/alto-directory+json"));
    ContType.insert(std::make_pair("alto-endpointprop+json", "application/alto-endpointprop+json"));
    ContType.insert(std::make_pair("alto-endpointpropparams+json", "application/alto-endpointpropparams+json"));
    ContType.insert(std::make_pair("alto-endpointcost+json", "application/alto-endpointcost+json"));
    ContType.insert(std::make_pair("alto-endpointcostparams+json", "application/alto-endpointcostparams+json"));
    ContType.insert(std::make_pair("alto-error+json", "application/alto-error+json"));
    ContType.insert(std::make_pair("alto-networkmapfilter+json", "application/alto-networkmapfilter+json"));
    ContType.insert(std::make_pair("alto-networkmap+json", "application/alto-networkmap+json"));
    ContType.insert(std::make_pair("alto-updatestreamcontrol+json", "application/alto-updatestreamcontrol+json"));
    ContType.insert(std::make_pair("alto-updatestreamparams+json", "application/alto-updatestreamparams+json"));
    ContType.insert(std::make_pair("AML", "application/AML"));
    ContType.insert(std::make_pair("andrew-inset", "application/andrew-inset"));
    ContType.insert(std::make_pair("applefile", "application/applefile"));
    ContType.insert(std::make_pair("at+jwt", "application/at+jwt"));
    ContType.insert(std::make_pair("ATF", "application/ATF"));
    ContType.insert(std::make_pair("ATFX", "application/ATFX"));
    ContType.insert(std::make_pair("atom+xml", "application/atom+xml"));
    ContType.insert(std::make_pair("atomcat+xml", "application/atomcat+xml"));
    ContType.insert(std::make_pair("atomdeleted+xml", "application/atomdeleted+xml"));
    ContType.insert(std::make_pair("atomicmail", "application/atomicmail"));
    ContType.insert(std::make_pair("atomsvc+xml", "application/atomsvc+xml"));
    ContType.insert(std::make_pair("atsc-dwd+xml", "application/atsc-dwd+xml"));
    ContType.insert(std::make_pair("atsc-dynamic-event-message", "application/atsc-dynamic-event-message"));
    ContType.insert(std::make_pair("atsc-held+xml", "application/atsc-held+xml"));
    ContType.insert(std::make_pair("atsc-rdt+json", "application/atsc-rdt+json"));
    ContType.insert(std::make_pair("atsc-rsat+xml", "application/atsc-rsat+xml"));
    ContType.insert(std::make_pair("ATXML", "application/ATXML"));
    ContType.insert(std::make_pair("auth-policy+xml", "application/auth-policy+xml"));
    ContType.insert(std::make_pair("bacnet-xdd+zip", "application/bacnet-xdd+zip"));
    ContType.insert(std::make_pair("batch-SMTP", "application/batch-SMTP"));
    ContType.insert(std::make_pair("beep+xml", "application/beep+xml"));
    ContType.insert(std::make_pair("calendar+json", "application/calendar+json"));
    ContType.insert(std::make_pair("calendar+xml", "application/calendar+xml"));
    ContType.insert(std::make_pair("call-completion", "application/call-completion"));
    ContType.insert(std::make_pair("CALS-1840", "application/CALS-1840"));
    ContType.insert(std::make_pair("captive+json", "application/captive+json"));
    ContType.insert(std::make_pair("cbor", "application/cbor"));
    ContType.insert(std::make_pair("cbor-seq", "application/cbor-seq"));
    ContType.insert(std::make_pair("cccex", "application/cccex"));
    ContType.insert(std::make_pair("ccmp+xml", "application/ccmp+xml"));
    ContType.insert(std::make_pair("ccxml+xml", "application/ccxml+xml"));
    ContType.insert(std::make_pair("CDFX+XML", "application/CDFX+XML"));
    ContType.insert(std::make_pair("cdmi-capability", "application/cdmi-capability"));
    ContType.insert(std::make_pair("cdmi-container", "application/cdmi-container"));
    ContType.insert(std::make_pair("cdmi-domain", "application/cdmi-domain"));
    ContType.insert(std::make_pair("cdmi-object", "application/cdmi-object"));
    ContType.insert(std::make_pair("cdmi-queue", "application/cdmi-queue"));
    ContType.insert(std::make_pair("cdni", "application/cdni"));
    ContType.insert(std::make_pair("CEA", "application/CEA"));
    ContType.insert(std::make_pair("cea-2018+xml", "application/cea-2018+xml"));
    ContType.insert(std::make_pair("cellml+xml", "application/cellml+xml"));
    ContType.insert(std::make_pair("cfw", "application/cfw"));
    ContType.insert(std::make_pair("city+json", "application/city+json"));
    ContType.insert(std::make_pair("clr", "application/clr"));
    ContType.insert(std::make_pair("clue_info+xml", "application/clue_info+xml"));
    ContType.insert(std::make_pair("clue+xml", "application/clue+xml"));
    ContType.insert(std::make_pair("cms", "application/cms"));
    ContType.insert(std::make_pair("cnrp+xml", "application/cnrp+xml"));
    ContType.insert(std::make_pair("coap-group+json", "application/coap-group+json"));
    ContType.insert(std::make_pair("coap-payload", "application/coap-payload"));
    ContType.insert(std::make_pair("commonground", "application/commonground"));
    ContType.insert(std::make_pair("conference-info+xml", "application/conference-info+xml"));
    ContType.insert(std::make_pair("cpl+xml", "application/cpl+xml"));
    ContType.insert(std::make_pair("cose", "application/cose"));
    ContType.insert(std::make_pair("cose-key", "application/cose-key"));
    ContType.insert(std::make_pair("cose-key-set", "application/cose-key-set"));
    ContType.insert(std::make_pair("csrattrs", "application/csrattrs"));
    ContType.insert(std::make_pair("csta+xml", "application/csta+xml"));
    ContType.insert(std::make_pair("CSTAdata+xml", "application/CSTAdata+xml"));
    ContType.insert(std::make_pair("csvm+json", "application/csvm+json"));
    ContType.insert(std::make_pair("cwt", "application/cwt"));
    ContType.insert(std::make_pair("cybercash", "application/cybercash"));
    ContType.insert(std::make_pair("dash+xml", "application/dash+xml"));
    ContType.insert(std::make_pair("dash-patch+xml", "application/dash-patch+xml"));
    ContType.insert(std::make_pair("dashdelta", "application/dashdelta"));
    ContType.insert(std::make_pair("davmount+xml", "application/davmount+xml"));
    ContType.insert(std::make_pair("dca-rft", "application/dca-rft"));
    ContType.insert(std::make_pair("DCD", "application/DCD"));
    ContType.insert(std::make_pair("dec-dx", "application/dec-dx"));
    ContType.insert(std::make_pair("dialog-info+xml", "application/dialog-info+xml"));
    ContType.insert(std::make_pair("dicom", "application/dicom"));
    ContType.insert(std::make_pair("dicom+json", "application/dicom+json"));
    ContType.insert(std::make_pair("dicom+xml", "application/dicom+xml"));
    ContType.insert(std::make_pair("DII", "application/DII"));
    ContType.insert(std::make_pair("DIT", "application/DIT"));
    ContType.insert(std::make_pair("dns", "application/dns"));
    ContType.insert(std::make_pair("dns+json", "application/dns+json"));
    ContType.insert(std::make_pair("dns-message", "application/dns-message"));
    ContType.insert(std::make_pair("dots+cbor", "application/dots+cbor"));
    ContType.insert(std::make_pair("dskpp+xml", "application/dskpp+xml"));
    ContType.insert(std::make_pair("dssc+der", "application/dssc+der"));
    ContType.insert(std::make_pair("dssc+xml", "application/dssc+xml"));
    ContType.insert(std::make_pair("dvcs", "application/dvcs"));
    ContType.insert(std::make_pair("ecmascript", "application/ecmascript"));
    ContType.insert(std::make_pair("EDI-consent", "application/EDI-consent"));
    ContType.insert(std::make_pair("EDIFACT", "application/EDIFACT"));
    ContType.insert(std::make_pair("EDI-X12", "application/EDI-X12"));
    ContType.insert(std::make_pair("efi", "application/efi"));
    ContType.insert(std::make_pair("elm+json", "application/elm+json"));
    ContType.insert(std::make_pair("elm+xml", "application/elm+xml"));
    ContType.insert(std::make_pair("EmergencyCallData.cap+xml", "application/EmergencyCallData.cap+xml"));
    ContType.insert(std::make_pair("EmergencyCallData.Comment+xml", "application/EmergencyCallData.Comment+xml"));
    ContType.insert(std::make_pair("EmergencyCallData.Control+xml", "application/EmergencyCallData.Control+xml"));
    ContType.insert(std::make_pair("EmergencyCallData.DeviceInfo+xml", "application/EmergencyCallData.DeviceInfo+xml"));
    ContType.insert(std::make_pair("EmergencyCallData.eCall.MSD", "application/EmergencyCallData.eCall.MSD"));
    ContType.insert(std::make_pair("EmergencyCallData.ProviderInfo+xml", "application/EmergencyCallData.ProviderInfo+xml"));
    ContType.insert(std::make_pair("EmergencyCallData.ServiceInfo+xml", "application/EmergencyCallData.ServiceInfo+xml"));
    ContType.insert(std::make_pair("EmergencyCallData.SubscriberInfo+xml", "application/EmergencyCallData.SubscriberInfo+xml"));
    ContType.insert(std::make_pair("EmergencyCallData.VEDS+xml", "application/EmergencyCallData.VEDS+xml"));
    ContType.insert(std::make_pair("emma+xml", "application/emma+xml"));
    ContType.insert(std::make_pair("emotionml+xml", "application/emotionml+xml"));
    ContType.insert(std::make_pair("encaprtp", "application/encaprtp"));
    ContType.insert(std::make_pair("epp+xml", "application/epp+xml"));
    ContType.insert(std::make_pair("epub+zip", "application/epub+zip"));
    ContType.insert(std::make_pair("eshop", "application/eshop"));
    ContType.insert(std::make_pair("example", "application/example"));
    ContType.insert(std::make_pair("exi", "application/exi"));
    ContType.insert(std::make_pair("expect-ct-report+json", "application/expect-ct-report+json"));
    ContType.insert(std::make_pair("express", "application/express"));
    ContType.insert(std::make_pair("fastinfoset", "application/fastinfoset"));
    ContType.insert(std::make_pair("fastsoap", "application/fastsoap"));
    ContType.insert(std::make_pair("fdt+xml", "application/fdt+xml"));
    ContType.insert(std::make_pair("fhir+json", "application/fhir+json"));
    ContType.insert(std::make_pair("fhir+xml", "application/fhir+xml"));
    ContType.insert(std::make_pair("fits", "application/fits"));
    ContType.insert(std::make_pair("flexfec", "application/flexfec"));
    ContType.insert(std::make_pair("font-sfnt - DEPRECATED in favor of font/sfnt", "application/font-sfnt"));
    ContType.insert(std::make_pair("font-tdpfr", "application/font-tdpfr"));
    ContType.insert(std::make_pair("font-woff - DEPRECATED in favor of font/woff", "application/font-woff"));
    ContType.insert(std::make_pair("framework-attributes+xml", "application/framework-attributes+xml"));
    ContType.insert(std::make_pair("geo+json", "application/geo+json"));
    ContType.insert(std::make_pair("geo+json-seq", "application/geo+json-seq"));
    ContType.insert(std::make_pair("geopackage+sqlite3", "application/geopackage+sqlite3"));
    ContType.insert(std::make_pair("geoxacml+xml", "application/geoxacml+xml"));
    ContType.insert(std::make_pair("gltf-buffer", "application/gltf-buffer"));
    ContType.insert(std::make_pair("gml+xml", "application/gml+xml"));
    ContType.insert(std::make_pair("gzip", "application/gzip"));
    ContType.insert(std::make_pair("H224", "application/H224"));
    ContType.insert(std::make_pair("held+xml", "application/held+xml"));
    ContType.insert(std::make_pair("http", "application/http"));
    ContType.insert(std::make_pair("hyperstudio", "application/hyperstudio"));
    ContType.insert(std::make_pair("ibe-key-request+xml", "application/ibe-key-request+xml"));
    ContType.insert(std::make_pair("ibe-pkg-reply+xml", "application/ibe-pkg-reply+xml"));
    ContType.insert(std::make_pair("ibe-pp-data", "application/ibe-pp-data"));
    ContType.insert(std::make_pair("iges", "application/iges"));
    ContType.insert(std::make_pair("im-iscomposing+xml", "application/im-iscomposing+xml"));
    ContType.insert(std::make_pair("index", "application/index"));
    ContType.insert(std::make_pair("index.cmd", "application/index.cmd"));
    ContType.insert(std::make_pair("index.obj", "application/index.obj"));
    ContType.insert(std::make_pair("index.response", "application/index.response"));
    ContType.insert(std::make_pair("index.vnd", "application/index.vnd"));
    ContType.insert(std::make_pair("inkml+xml", "application/inkml+xml"));
    ContType.insert(std::make_pair("IOTP", "application/IOTP"));
    ContType.insert(std::make_pair("ipfix", "application/ipfix"));
    ContType.insert(std::make_pair("ipp", "application/ipp"));
    ContType.insert(std::make_pair("ISUP", "application/ISUP"));
    ContType.insert(std::make_pair("its+xml", "application/its+xml"));
    ContType.insert(std::make_pair("javascript", "application/javascript"));
    ContType.insert(std::make_pair("jf2feed+json", "application/jf2feed+json"));
    ContType.insert(std::make_pair("jose", "application/jose"));
    ContType.insert(std::make_pair("jose+json", "application/jose+json"));
    ContType.insert(std::make_pair("jrd+json", "application/jrd+json"));
    ContType.insert(std::make_pair("jscalendar+json", "application/jscalendar+json"));
    ContType.insert(std::make_pair("json", "application/json"));
    ContType.insert(std::make_pair("json-patch+json", "application/json-patch+json"));
    ContType.insert(std::make_pair("json-seq", "application/json-seq"));
    ContType.insert(std::make_pair("jwk+json", "application/jwk+json"));
    ContType.insert(std::make_pair("jwk-set+json", "application/jwk-set+json"));
    ContType.insert(std::make_pair("jwt", "application/jwt"));
    ContType.insert(std::make_pair("kpml-request+xml", "application/kpml-request+xml"));
    ContType.insert(std::make_pair("kpml-response+xml", "application/kpml-response+xml"));
    ContType.insert(std::make_pair("ld+json", "application/ld+json"));
    ContType.insert(std::make_pair("lgr+xml", "application/lgr+xml"));
    ContType.insert(std::make_pair("link-format", "application/link-format"));
    ContType.insert(std::make_pair("load-control+xml", "application/load-control+xml"));
    ContType.insert(std::make_pair("lost+xml", "application/lost+xml"));
    ContType.insert(std::make_pair("lostsync+xml", "application/lostsync+xml"));
    ContType.insert(std::make_pair("lpf+zip", "application/lpf+zip"));
    ContType.insert(std::make_pair("LXF", "application/LXF"));
    ContType.insert(std::make_pair("mac-binhex40", "application/mac-binhex40"));
    ContType.insert(std::make_pair("macwriteii", "application/macwriteii"));
    ContType.insert(std::make_pair("mads+xml", "application/mads+xml"));
    ContType.insert(std::make_pair("manifest+json", "application/manifest+json"));
    ContType.insert(std::make_pair("marc", "application/marc"));
    ContType.insert(std::make_pair("marcxml+xml", "application/marcxml+xml"));
    ContType.insert(std::make_pair("mathematica", "application/mathematica"));
    ContType.insert(std::make_pair("mathml+xml", "application/mathml+xml"));
    ContType.insert(std::make_pair("mathml-content+xml", "application/mathml-content+xml"));
    ContType.insert(std::make_pair("mathml-presentation+xml", "application/mathml-presentation+xml"));
    ContType.insert(std::make_pair("mbms-associated-procedure-description+xml", "application/mbms-associated-procedure-description+xml"));
    ContType.insert(std::make_pair("mbms-deregister+xml", "application/mbms-deregister+xml"));
    ContType.insert(std::make_pair("mbms-envelope+xml", "application/mbms-envelope+xml"));
    ContType.insert(std::make_pair("mbms-msk-response+xml", "application/mbms-msk-response+xml"));
    ContType.insert(std::make_pair("mbms-msk+xml", "application/mbms-msk+xml"));
    ContType.insert(std::make_pair("mbms-protection-description+xml", "application/mbms-protection-description+xml"));
    ContType.insert(std::make_pair("mbms-reception-report+xml", "application/mbms-reception-report+xml"));
    ContType.insert(std::make_pair("mbms-register-response+xml", "application/mbms-register-response+xml"));
    ContType.insert(std::make_pair("mbms-register+xml", "application/mbms-register+xml"));
    ContType.insert(std::make_pair("mbms-schedule+xml", "application/mbms-schedule+xml"));
    ContType.insert(std::make_pair("mbms-user-service-description+xml", "application/mbms-user-service-description+xml"));
    ContType.insert(std::make_pair("mbox", "application/mbox"));
    ContType.insert(std::make_pair("media_control+xml", "application/media_control+xml"));
    ContType.insert(std::make_pair("media-policy-dataset+xml", "application/media-policy-dataset+xml"));
    ContType.insert(std::make_pair("mediaservercontrol+xml", "application/mediaservercontrol+xml"));
    ContType.insert(std::make_pair("merge-patch+json", "application/merge-patch+json"));
    ContType.insert(std::make_pair("metalink4+xml", "application/metalink4+xml"));
    ContType.insert(std::make_pair("mets+xml", "application/mets+xml"));
    ContType.insert(std::make_pair("MF4", "application/MF4"));
    ContType.insert(std::make_pair("mikey", "application/mikey"));
    ContType.insert(std::make_pair("mipc", "application/mipc"));
    ContType.insert(std::make_pair("missing-blocks+cbor-seq", "application/missing-blocks+cbor-seq"));
    ContType.insert(std::make_pair("mmt-aei+xml", "application/mmt-aei+xml"));
    ContType.insert(std::make_pair("mmt-usd+xml", "application/mmt-usd+xml"));
    ContType.insert(std::make_pair("mods+xml", "application/mods+xml"));
    ContType.insert(std::make_pair("moss-keys", "application/moss-keys"));
    ContType.insert(std::make_pair("moss-signature", "application/moss-signature"));
    ContType.insert(std::make_pair("mosskey-data", "application/mosskey-data"));
    ContType.insert(std::make_pair("mosskey-request", "application/mosskey-request"));
    ContType.insert(std::make_pair("mp21", "application/mp21"));
    ContType.insert(std::make_pair("mp4", "application/mp4"));
    ContType.insert(std::make_pair("mpeg4-generic", "application/mpeg4-generic"));
    ContType.insert(std::make_pair("mpeg4-iod", "application/mpeg4-iod"));
    ContType.insert(std::make_pair("mpeg4-iod-xmt", "application/mpeg4-iod-xmt"));
    ContType.insert(std::make_pair("mrb-consumer+xml", "application/mrb-consumer+xml"));
    ContType.insert(std::make_pair("mrb-publish+xml", "application/mrb-publish+xml"));
    ContType.insert(std::make_pair("msc-ivr+xml", "application/msc-ivr+xml"));
    ContType.insert(std::make_pair("msc-mixer+xml", "application/msc-mixer+xml"));
    ContType.insert(std::make_pair("msword", "application/msword"));
    ContType.insert(std::make_pair("mud+json", "application/mud+json"));
    ContType.insert(std::make_pair("multipart-core", "application/multipart-core"));
    ContType.insert(std::make_pair("mxf", "application/mxf"));
    ContType.insert(std::make_pair("n-quads", "application/n-quads"));
    ContType.insert(std::make_pair("n-triples", "application/n-triples"));
    ContType.insert(std::make_pair("nasdata", "application/nasdata"));
    ContType.insert(std::make_pair("news-checkgroups", "application/news-checkgroups"));
    ContType.insert(std::make_pair("news-groupinfo", "application/news-groupinfo"));
    ContType.insert(std::make_pair("news-transmission", "application/news-transmission"));
    ContType.insert(std::make_pair("nlsml+xml", "application/nlsml+xml"));
    ContType.insert(std::make_pair("node", "application/node"));
    ContType.insert(std::make_pair("nss", "application/nss"));
    ContType.insert(std::make_pair("oauth-authz-req+jwt", "application/oauth-authz-req+jwt"));
    ContType.insert(std::make_pair("ocsp-request", "application/ocsp-request"));
    ContType.insert(std::make_pair("ocsp-response", "application/ocsp-response"));
    ContType.insert(std::make_pair("octet-stream", "application/octet-stream"));
    ContType.insert(std::make_pair("ODA", "application/ODA"));
    ContType.insert(std::make_pair("odm+xml", "application/odm+xml"));
    ContType.insert(std::make_pair("ODX", "application/ODX"));
    ContType.insert(std::make_pair("oebps-package+xml", "application/oebps-package+xml"));
    ContType.insert(std::make_pair("ogg", "application/ogg"));
    ContType.insert(std::make_pair("opc-nodeset+xml", "application/opc-nodeset+xml"));
    ContType.insert(std::make_pair("oscore", "application/oscore"));
    ContType.insert(std::make_pair("oxps", "application/oxps"));
    ContType.insert(std::make_pair("p21", "application/p21"));
    ContType.insert(std::make_pair("p21+zip", "application/p21+zip"));
    ContType.insert(std::make_pair("p2p-overlay+xml", "application/p2p-overlay+xml"));
    ContType.insert(std::make_pair("parityfec", "application/parityfec"));
    ContType.insert(std::make_pair("passport", "application/passport"));
    ContType.insert(std::make_pair("patch-ops-error+xml", "application/patch-ops-error+xml"));
    ContType.insert(std::make_pair("pdf", "application/pdf"));
    ContType.insert(std::make_pair("PDX", "application/PDX"));
    ContType.insert(std::make_pair("pem-certificate-chain", "application/pem-certificate-chain"));
    ContType.insert(std::make_pair("pgp-encrypted", "application/pgp-encrypted"));
    ContType.insert(std::make_pair("pgp-keys", "application/pgp-keys"));
    ContType.insert(std::make_pair("pgp-signature", "application/pgp-signature"));
    ContType.insert(std::make_pair("pidf-diff+xml", "application/pidf-diff+xml"));
    ContType.insert(std::make_pair("pidf+xml", "application/pidf+xml"));
    ContType.insert(std::make_pair("pkcs10", "application/pkcs10"));
    ContType.insert(std::make_pair("pkcs7-mime", "application/pkcs7-mime"));
    ContType.insert(std::make_pair("pkcs7-signature", "application/pkcs7-signature"));
    ContType.insert(std::make_pair("pkcs8", "application/pkcs8"));
    ContType.insert(std::make_pair("pkcs8-encrypted", "application/pkcs8-encrypted"));
    ContType.insert(std::make_pair("pkcs12", "application/pkcs12"));
    ContType.insert(std::make_pair("pkix-attr-cert", "application/pkix-attr-cert"));
    ContType.insert(std::make_pair("pkix-cert", "application/pkix-cert"));
    ContType.insert(std::make_pair("pkix-crl", "application/pkix-crl"));
    ContType.insert(std::make_pair("pkix-pkipath", "application/pkix-pkipath"));
    ContType.insert(std::make_pair("pkixcmp", "application/pkixcmp"));
    ContType.insert(std::make_pair("pls+xml", "application/pls+xml"));
    ContType.insert(std::make_pair("poc-settings+xml", "application/poc-settings+xml"));
    ContType.insert(std::make_pair("postscript", "application/postscript"));
    ContType.insert(std::make_pair("ppsp-tracker+json", "application/ppsp-tracker+json"));
    ContType.insert(std::make_pair("problem+json", "application/problem+json"));
    ContType.insert(std::make_pair("problem+xml", "application/problem+xml"));
    ContType.insert(std::make_pair("provenance+xml", "application/provenance+xml"));
    ContType.insert(std::make_pair("prs.alvestrand.titrax-sheet", "application/prs.alvestrand.titrax-sheet"));
    ContType.insert(std::make_pair("prs.cww", "application/prs.cww"));
    ContType.insert(std::make_pair("prs.cyn", "application/prs.cyn"));
    ContType.insert(std::make_pair("prs.hpub+zip", "application/prs.hpub+zip"));
    ContType.insert(std::make_pair("prs.nprend", "application/prs.nprend"));
    ContType.insert(std::make_pair("prs.plucker", "application/prs.plucker"));
    ContType.insert(std::make_pair("prs.rdf-xml-crypt", "application/prs.rdf-xml-crypt"));
    ContType.insert(std::make_pair("prs.xsf+xml", "application/prs.xsf+xml"));
    ContType.insert(std::make_pair("pskc+xml", "application/pskc+xml"));
    ContType.insert(std::make_pair("pvd+json", "application/pvd+json"));
    ContType.insert(std::make_pair("rdf+xml", "application/rdf+xml"));
    ContType.insert(std::make_pair("route-apd+xml", "application/route-apd+xml"));
    ContType.insert(std::make_pair("route-s-tsid+xml", "application/route-s-tsid+xml"));
    ContType.insert(std::make_pair("route-usd+xml", "application/route-usd+xml"));
    ContType.insert(std::make_pair("QSIG", "application/QSIG"));
    ContType.insert(std::make_pair("raptorfec", "application/raptorfec"));
    ContType.insert(std::make_pair("rdap+json", "application/rdap+json"));
    ContType.insert(std::make_pair("reginfo+xml", "application/reginfo+xml"));
    ContType.insert(std::make_pair("relax-ng-compact-syntax", "application/relax-ng-compact-syntax"));
    ContType.insert(std::make_pair("remote-printing", "application/remote-printing"));
    ContType.insert(std::make_pair("reputon+json", "application/reputon+json"));
    ContType.insert(std::make_pair("resource-lists-diff+xml", "application/resource-lists-diff+xml"));
    ContType.insert(std::make_pair("resource-lists+xml", "application/resource-lists+xml"));
    ContType.insert(std::make_pair("rfc+xml", "application/rfc+xml"));
    ContType.insert(std::make_pair("riscos", "application/riscos"));
    ContType.insert(std::make_pair("rlmi+xml", "application/rlmi+xml"));
    ContType.insert(std::make_pair("rls-services+xml", "application/rls-services+xml"));
    ContType.insert(std::make_pair("rpki-ghostbusters", "application/rpki-ghostbusters"));
    ContType.insert(std::make_pair("rpki-manifest", "application/rpki-manifest"));
    ContType.insert(std::make_pair("rpki-publication", "application/rpki-publication"));
    ContType.insert(std::make_pair("rpki-roa", "application/rpki-roa"));
    ContType.insert(std::make_pair("rpki-updown", "application/rpki-updown"));
    ContType.insert(std::make_pair("rtf", "application/rtf"));
    ContType.insert(std::make_pair("rtploopback", "application/rtploopback"));
    ContType.insert(std::make_pair("rtx", "application/rtx"));
    ContType.insert(std::make_pair("samlassertion+xml", "application/samlassertion+xml"));
    ContType.insert(std::make_pair("samlmetadata+xml", "application/samlmetadata+xml"));
    ContType.insert(std::make_pair("sarif-external-properties+json", "application/sarif-external-properties+json"));
    ContType.insert(std::make_pair("sarif+json", "application/sarif+json"));
    ContType.insert(std::make_pair("sbe", "application/sbe"));
    ContType.insert(std::make_pair("sbml+xml", "application/sbml+xml"));
    ContType.insert(std::make_pair("scaip+xml", "application/scaip+xml"));
    ContType.insert(std::make_pair("scim+json", "application/scim+json"));
    ContType.insert(std::make_pair("scvp-cv-request", "application/scvp-cv-request"));
    ContType.insert(std::make_pair("scvp-cv-response", "application/scvp-cv-response"));
    ContType.insert(std::make_pair("scvp-vp-request", "application/scvp-vp-request"));
    ContType.insert(std::make_pair("scvp-vp-response", "application/scvp-vp-response"));
    ContType.insert(std::make_pair("sdp", "application/sdp"));
    ContType.insert(std::make_pair("secevent+jwt", "application/secevent+jwt"));
    ContType.insert(std::make_pair("senml-etch+cbor", "application/senml-etch+cbor"));
    ContType.insert(std::make_pair("senml-etch+json", "application/senml-etch+json"));
    ContType.insert(std::make_pair("senml-exi", "application/senml-exi"));
    ContType.insert(std::make_pair("senml+cbor", "application/senml+cbor"));
    ContType.insert(std::make_pair("senml+json", "application/senml+json"));
    ContType.insert(std::make_pair("senml+xml", "application/senml+xml"));
    ContType.insert(std::make_pair("sensml-exi", "application/sensml-exi"));
    ContType.insert(std::make_pair("sensml+cbor", "application/sensml+cbor"));
    ContType.insert(std::make_pair("sensml+json", "application/sensml+json"));
    ContType.insert(std::make_pair("sensml+xml", "application/sensml+xml"));
    ContType.insert(std::make_pair("sep-exi", "application/sep-exi"));
    ContType.insert(std::make_pair("sep+xml", "application/sep+xml"));
    ContType.insert(std::make_pair("session-info", "application/session-info"));
    ContType.insert(std::make_pair("set-payment", "application/set-payment"));
    ContType.insert(std::make_pair("set-payment-initiation", "application/set-payment-initiation"));
    ContType.insert(std::make_pair("set-registration", "application/set-registration"));
    ContType.insert(std::make_pair("set-registration-initiation", "application/set-registration-initiation"));
    ContType.insert(std::make_pair("SGML", "application/SGML"));
    ContType.insert(std::make_pair("sgml-open-catalog", "application/sgml-open-catalog"));
    ContType.insert(std::make_pair("shf+xml", "application/shf+xml"));
    ContType.insert(std::make_pair("sieve", "application/sieve"));
    ContType.insert(std::make_pair("simple-filter+xml", "application/simple-filter+xml"));
    ContType.insert(std::make_pair("simple-message-summary", "application/simple-message-summary"));
    ContType.insert(std::make_pair("simpleSymbolContainer", "application/simpleSymbolContainer"));
    ContType.insert(std::make_pair("sipc", "application/sipc"));
    ContType.insert(std::make_pair("slate", "application/slate"));
    ContType.insert(std::make_pair("smil (OBSOLETED in favor of application/smil+xml)", "application/smil"));
    ContType.insert(std::make_pair("smil+xml", "application/smil+xml"));
    ContType.insert(std::make_pair("smpte336m", "application/smpte336m"));
    ContType.insert(std::make_pair("soap+fastinfoset", "application/soap+fastinfoset"));
    ContType.insert(std::make_pair("soap+xml", "application/soap+xml"));
    ContType.insert(std::make_pair("sparql-query", "application/sparql-query"));
    ContType.insert(std::make_pair("spdx+json", "application/spdx+json"));
    ContType.insert(std::make_pair("sparql-results+xml", "application/sparql-results+xml"));
    ContType.insert(std::make_pair("spirits-event+xml", "application/spirits-event+xml"));
    ContType.insert(std::make_pair("sql", "application/sql"));
    ContType.insert(std::make_pair("srgs", "application/srgs"));
    ContType.insert(std::make_pair("srgs+xml", "application/srgs+xml"));
    ContType.insert(std::make_pair("sru+xml", "application/sru+xml"));
    ContType.insert(std::make_pair("ssml+xml", "application/ssml+xml"));
    ContType.insert(std::make_pair("stix+json", "application/stix+json"));
    ContType.insert(std::make_pair("swid+xml", "application/swid+xml"));
    ContType.insert(std::make_pair("tamp-apex-update", "application/tamp-apex-update"));
    ContType.insert(std::make_pair("tamp-apex-update-confirm", "application/tamp-apex-update-confirm"));
    ContType.insert(std::make_pair("tamp-community-update", "application/tamp-community-update"));
    ContType.insert(std::make_pair("tamp-community-update-confirm", "application/tamp-community-update-confirm"));
    ContType.insert(std::make_pair("tamp-error", "application/tamp-error"));
    ContType.insert(std::make_pair("tamp-sequence-adjust", "application/tamp-sequence-adjust"));
    ContType.insert(std::make_pair("tamp-sequence-adjust-confirm", "application/tamp-sequence-adjust-confirm"));
    ContType.insert(std::make_pair("tamp-status-query", "application/tamp-status-query"));
    ContType.insert(std::make_pair("tamp-status-response", "application/tamp-status-response"));
    ContType.insert(std::make_pair("tamp-update", "application/tamp-update"));
    ContType.insert(std::make_pair("tamp-update-confirm", "application/tamp-update-confirm"));
    ContType.insert(std::make_pair("taxii+json", "application/taxii+json"));
    ContType.insert(std::make_pair("td+json", "application/td+json"));
    ContType.insert(std::make_pair("tei+xml", "application/tei+xml"));
    ContType.insert(std::make_pair("TETRA_ISI", "application/TETRA_ISI"));
    ContType.insert(std::make_pair("thraud+xml", "application/thraud+xml"));
    ContType.insert(std::make_pair("timestamp-query", "application/timestamp-query"));
    ContType.insert(std::make_pair("timestamp-reply", "application/timestamp-reply"));
    ContType.insert(std::make_pair("timestamped-data", "application/timestamped-data"));
    ContType.insert(std::make_pair("tlsrpt+gzip", "application/tlsrpt+gzip"));
    ContType.insert(std::make_pair("tlsrpt+json", "application/tlsrpt+json"));
    ContType.insert(std::make_pair("tnauthlist", "application/tnauthlist"));
    ContType.insert(std::make_pair("token-introspection+jwt", "application/token-introspection+jwt"));
    ContType.insert(std::make_pair("trickle-ice-sdpfrag", "application/trickle-ice-sdpfrag"));
    ContType.insert(std::make_pair("trig", "application/trig"));
    ContType.insert(std::make_pair("ttml+xml", "application/ttml+xml"));
    ContType.insert(std::make_pair("tve-trigger", "application/tve-trigger"));
    ContType.insert(std::make_pair("tzif", "application/tzif"));
    ContType.insert(std::make_pair("tzif-leap", "application/tzif-leap"));
    ContType.insert(std::make_pair("ulpfec", "application/ulpfec"));
    ContType.insert(std::make_pair("urc-grpsheet+xml", "application/urc-grpsheet+xml"));
    ContType.insert(std::make_pair("urc-ressheet+xml", "application/urc-ressheet+xml"));
    ContType.insert(std::make_pair("urc-targetdesc+xml", "application/urc-targetdesc+xml"));
    ContType.insert(std::make_pair("urc-uisocketdesc+xml", "application/urc-uisocketdesc+xml"));
    ContType.insert(std::make_pair("vcard+json", "application/vcard+json"));
    ContType.insert(std::make_pair("vcard+xml", "application/vcard+xml"));
    ContType.insert(std::make_pair("vemmi", "application/vemmi"));
    ContType.insert(std::make_pair("vnd.1000minds.decision-model+xml", "application/vnd.1000minds.decision-model+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.5gnas", "application/vnd.3gpp.5gnas"));
    ContType.insert(std::make_pair("vnd.3gpp.access-transfer-events+xml", "application/vnd.3gpp.access-transfer-events+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.bsf+xml", "application/vnd.3gpp.bsf+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.GMOP+xml", "application/vnd.3gpp.GMOP+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.gtpc", "application/vnd.3gpp.gtpc"));
    ContType.insert(std::make_pair("vnd.3gpp.interworking-data", "application/vnd.3gpp.interworking-data"));
    ContType.insert(std::make_pair("vnd.3gpp.lpp", "application/vnd.3gpp.lpp"));
    ContType.insert(std::make_pair("vnd.3gpp.mc-signalling-ear", "application/vnd.3gpp.mc-signalling-ear"));
    ContType.insert(std::make_pair("vnd.3gpp.mcdata-affiliation-command+xml", "application/vnd.3gpp.mcdata-affiliation-command+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcdata-info+xml", "application/vnd.3gpp.mcdata-info+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcdata-payload", "application/vnd.3gpp.mcdata-payload"));
    ContType.insert(std::make_pair("vnd.3gpp.mcdata-service-config+xml", "application/vnd.3gpp.mcdata-service-config+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcdata-signalling", "application/vnd.3gpp.mcdata-signalling"));
    ContType.insert(std::make_pair("vnd.3gpp.mcdata-ue-config+xml", "application/vnd.3gpp.mcdata-ue-config+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcdata-user-profile+xml", "application/vnd.3gpp.mcdata-user-profile+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcptt-affiliation-command+xml", "application/vnd.3gpp.mcptt-affiliation-command+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcptt-floor-request+xml", "application/vnd.3gpp.mcptt-floor-request+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcptt-info+xml", "application/vnd.3gpp.mcptt-info+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcptt-location-info+xml", "application/vnd.3gpp.mcptt-location-info+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcptt-mbms-usage-info+xml", "application/vnd.3gpp.mcptt-mbms-usage-info+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcptt-service-config+xml", "application/vnd.3gpp.mcptt-service-config+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcptt-signed+xml", "application/vnd.3gpp.mcptt-signed+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcptt-ue-config+xml", "application/vnd.3gpp.mcptt-ue-config+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcptt-ue-init-config+xml", "application/vnd.3gpp.mcptt-ue-init-config+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcptt-user-profile+xml", "application/vnd.3gpp.mcptt-user-profile+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcvideo-affiliation-command+xml", "application/vnd.3gpp.mcvideo-affiliation-command+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcvideo-affiliation-info+xml (OBSOLETED in favor of application/vnd.3gpp.mcvideo-info+xml)", "application/vnd.3gpp.mcvideo-affiliation-info+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcvideo-info+xml", "application/vnd.3gpp.mcvideo-info+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcvideo-location-info+xml", "application/vnd.3gpp.mcvideo-location-info+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcvideo-mbms-usage-info+xml", "application/vnd.3gpp.mcvideo-mbms-usage-info+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcvideo-service-config+xml", "application/vnd.3gpp.mcvideo-service-config+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcvideo-transmission-request+xml", "application/vnd.3gpp.mcvideo-transmission-request+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcvideo-ue-config+xml", "application/vnd.3gpp.mcvideo-ue-config+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mcvideo-user-profile+xml", "application/vnd.3gpp.mcvideo-user-profile+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.mid-call+xml", "application/vnd.3gpp.mid-call+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.ngap", "application/vnd.3gpp.ngap"));
    ContType.insert(std::make_pair("vnd.3gpp.pfcp", "application/vnd.3gpp.pfcp"));
    ContType.insert(std::make_pair("vnd.3gpp.pic-bw-large", "application/vnd.3gpp.pic-bw-large"));
    ContType.insert(std::make_pair("vnd.3gpp.pic-bw-small", "application/vnd.3gpp.pic-bw-small"));
    ContType.insert(std::make_pair("vnd.3gpp.pic-bw-var", "application/vnd.3gpp.pic-bw-var"));
    ContType.insert(std::make_pair("vnd.3gpp-prose-pc3ch+xml", "application/vnd.3gpp-prose-pc3ch+xml"));
    ContType.insert(std::make_pair("vnd.3gpp-prose+xml", "application/vnd.3gpp-prose+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.s1ap", "application/vnd.3gpp.s1ap"));
    ContType.insert(std::make_pair("vnd.3gpp.sms", "application/vnd.3gpp.sms"));
    ContType.insert(std::make_pair("vnd.3gpp.sms+xml", "application/vnd.3gpp.sms+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.srvcc-ext+xml", "application/vnd.3gpp.srvcc-ext+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.SRVCC-info+xml", "application/vnd.3gpp.SRVCC-info+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.state-and-event-info+xml", "application/vnd.3gpp.state-and-event-info+xml"));
    ContType.insert(std::make_pair("vnd.3gpp.ussd+xml", "application/vnd.3gpp.ussd+xml"));
    ContType.insert(std::make_pair("vnd.3gpp-v2x-local-service-information", "application/vnd.3gpp-v2x-local-service-information"));
    ContType.insert(std::make_pair("vnd.3gpp2.bcmcsinfo+xml", "application/vnd.3gpp2.bcmcsinfo+xml"));
    ContType.insert(std::make_pair("vnd.3gpp2.sms", "application/vnd.3gpp2.sms"));
    ContType.insert(std::make_pair("vnd.3gpp2.tcap", "application/vnd.3gpp2.tcap"));
    ContType.insert(std::make_pair("vnd.3lightssoftware.imagescal", "application/vnd.3lightssoftware.imagescal"));
    ContType.insert(std::make_pair("vnd.3M.Post-it-Notes", "application/vnd.3M.Post-it-Notes"));
    ContType.insert(std::make_pair("vnd.accpac.simply.aso", "application/vnd.accpac.simply.aso"));
    ContType.insert(std::make_pair("vnd.accpac.simply.imp", "application/vnd.accpac.simply.imp"));
    ContType.insert(std::make_pair("vnd.acucobol", "application/vnd.acucobol"));
    ContType.insert(std::make_pair("vnd.acucorp", "application/vnd.acucorp"));
    ContType.insert(std::make_pair("vnd.adobe.flash.movie", "application/vnd.adobe.flash.movie"));
    ContType.insert(std::make_pair("vnd.adobe.formscentral.fcdt", "application/vnd.adobe.formscentral.fcdt"));
    ContType.insert(std::make_pair("vnd.adobe.fxp", "application/vnd.adobe.fxp"));
    ContType.insert(std::make_pair("vnd.adobe.partial-upload", "application/vnd.adobe.partial-upload"));
    ContType.insert(std::make_pair("vnd.adobe.xdp+xml", "application/vnd.adobe.xdp+xml"));
    ContType.insert(std::make_pair("vnd.adobe.xfdf", "application/vnd.adobe.xfdf"));
    ContType.insert(std::make_pair("vnd.aether.imp", "application/vnd.aether.imp"));
    ContType.insert(std::make_pair("vnd.afpc.afplinedata", "application/vnd.afpc.afplinedata"));
    ContType.insert(std::make_pair("vnd.afpc.afplinedata-pagedef", "application/vnd.afpc.afplinedata-pagedef"));
    ContType.insert(std::make_pair("vnd.afpc.cmoca-cmresource", "application/vnd.afpc.cmoca-cmresource"));
    ContType.insert(std::make_pair("vnd.afpc.foca-charset", "application/vnd.afpc.foca-charset"));
    ContType.insert(std::make_pair("vnd.afpc.foca-codedfont", "application/vnd.afpc.foca-codedfont"));
    ContType.insert(std::make_pair("vnd.afpc.foca-codepage", "application/vnd.afpc.foca-codepage"));
    ContType.insert(std::make_pair("vnd.afpc.modca", "application/vnd.afpc.modca"));
    ContType.insert(std::make_pair("vnd.afpc.modca-cmtable", "application/vnd.afpc.modca-cmtable"));
    ContType.insert(std::make_pair("vnd.afpc.modca-formdef", "application/vnd.afpc.modca-formdef"));
    ContType.insert(std::make_pair("vnd.afpc.modca-mediummap", "application/vnd.afpc.modca-mediummap"));
    ContType.insert(std::make_pair("vnd.afpc.modca-objectcontainer", "application/vnd.afpc.modca-objectcontainer"));
    ContType.insert(std::make_pair("vnd.afpc.modca-overlay", "application/vnd.afpc.modca-overlay"));
    ContType.insert(std::make_pair("vnd.afpc.modca-pagesegment", "application/vnd.afpc.modca-pagesegment"));
    ContType.insert(std::make_pair("vnd.age", "application/vnd.age"));
    ContType.insert(std::make_pair("vnd.ah-barcode", "application/vnd.ah-barcode"));
    ContType.insert(std::make_pair("vnd.ahead.space", "application/vnd.ahead.space"));
    ContType.insert(std::make_pair("vnd.airzip.filesecure.azf", "application/vnd.airzip.filesecure.azf"));
    ContType.insert(std::make_pair("vnd.airzip.filesecure.azs", "application/vnd.airzip.filesecure.azs"));
    ContType.insert(std::make_pair("vnd.amadeus+json", "application/vnd.amadeus+json"));
    ContType.insert(std::make_pair("vnd.amazon.mobi8-ebook", "application/vnd.amazon.mobi8-ebook"));
    ContType.insert(std::make_pair("vnd.americandynamics.acc", "application/vnd.americandynamics.acc"));
    ContType.insert(std::make_pair("vnd.amiga.ami", "application/vnd.amiga.ami"));
    ContType.insert(std::make_pair("vnd.amundsen.maze+xml", "application/vnd.amundsen.maze+xml"));
    ContType.insert(std::make_pair("vnd.android.ota", "application/vnd.android.ota"));
    ContType.insert(std::make_pair("vnd.anki", "application/vnd.anki"));
    ContType.insert(std::make_pair("vnd.anser-web-certificate-issue-initiation", "application/vnd.anser-web-certificate-issue-initiation"));
    ContType.insert(std::make_pair("vnd.antix.game-component", "application/vnd.antix.game-component"));
    ContType.insert(std::make_pair("vnd.apache.arrow.file", "application/vnd.apache.arrow.file"));
    ContType.insert(std::make_pair("vnd.apache.arrow.stream", "application/vnd.apache.arrow.stream"));
    ContType.insert(std::make_pair("vnd.apache.thrift.binary", "application/vnd.apache.thrift.binary"));
    ContType.insert(std::make_pair("vnd.apache.thrift.compact", "application/vnd.apache.thrift.compact"));
    ContType.insert(std::make_pair("vnd.apache.thrift.json", "application/vnd.apache.thrift.json"));
    ContType.insert(std::make_pair("vnd.api+json", "application/vnd.api+json"));
    ContType.insert(std::make_pair("vnd.aplextor.warrp+json", "application/vnd.aplextor.warrp+json"));
    ContType.insert(std::make_pair("vnd.apothekende.reservation+json", "application/vnd.apothekende.reservation+json"));
    ContType.insert(std::make_pair("vnd.apple.installer+xml", "application/vnd.apple.installer+xml"));
    ContType.insert(std::make_pair("vnd.apple.keynote", "application/vnd.apple.keynote"));
    ContType.insert(std::make_pair("vnd.apple.mpegurl", "application/vnd.apple.mpegurl"));
    ContType.insert(std::make_pair("vnd.apple.numbers", "application/vnd.apple.numbers"));
    ContType.insert(std::make_pair("vnd.apple.pages", "application/vnd.apple.pages"));
    ContType.insert(std::make_pair("vnd.arastra.swi (OBSOLETED in favor of application/vnd.aristanetworks.swi)", "application/vnd.arastra.swi"));
    ContType.insert(std::make_pair("vnd.aristanetworks.swi", "application/vnd.aristanetworks.swi"));
    ContType.insert(std::make_pair("vnd.artisan+json", "application/vnd.artisan+json"));
    ContType.insert(std::make_pair("vnd.artsquare", "application/vnd.artsquare"));
    ContType.insert(std::make_pair("vnd.astraea-software.iota", "application/vnd.astraea-software.iota"));
    ContType.insert(std::make_pair("vnd.audiograph", "application/vnd.audiograph"));
    ContType.insert(std::make_pair("vnd.autopackage", "application/vnd.autopackage"));
    ContType.insert(std::make_pair("vnd.avalon+json", "application/vnd.avalon+json"));
    ContType.insert(std::make_pair("vnd.avistar+xml", "application/vnd.avistar+xml"));
    ContType.insert(std::make_pair("vnd.balsamiq.bmml+xml", "application/vnd.balsamiq.bmml+xml"));
    ContType.insert(std::make_pair("vnd.banana-accounting", "application/vnd.banana-accounting"));
    ContType.insert(std::make_pair("vnd.bbf.usp.error", "application/vnd.bbf.usp.error"));
    ContType.insert(std::make_pair("vnd.bbf.usp.msg", "application/vnd.bbf.usp.msg"));
    ContType.insert(std::make_pair("vnd.bbf.usp.msg+json", "application/vnd.bbf.usp.msg+json"));
    ContType.insert(std::make_pair("vnd.balsamiq.bmpr", "application/vnd.balsamiq.bmpr"));
    ContType.insert(std::make_pair("vnd.bekitzur-stech+json", "application/vnd.bekitzur-stech+json"));
    ContType.insert(std::make_pair("vnd.bint.med-content", "application/vnd.bint.med-content"));
    ContType.insert(std::make_pair("vnd.biopax.rdf+xml", "application/vnd.biopax.rdf+xml"));
    ContType.insert(std::make_pair("vnd.blink-idb-value-wrapper", "application/vnd.blink-idb-value-wrapper"));
    ContType.insert(std::make_pair("vnd.blueice.multipass", "application/vnd.blueice.multipass"));
    ContType.insert(std::make_pair("vnd.bluetooth.ep.oob", "application/vnd.bluetooth.ep.oob"));
    ContType.insert(std::make_pair("vnd.bluetooth.le.oob", "application/vnd.bluetooth.le.oob"));
    ContType.insert(std::make_pair("vnd.bmi", "application/vnd.bmi"));
    ContType.insert(std::make_pair("vnd.bpf", "application/vnd.bpf"));
    ContType.insert(std::make_pair("vnd.bpf3", "application/vnd.bpf3"));
    ContType.insert(std::make_pair("vnd.businessobjects", "application/vnd.businessobjects"));
    ContType.insert(std::make_pair("vnd.byu.uapi+json", "application/vnd.byu.uapi+json"));
    ContType.insert(std::make_pair("vnd.cab-jscript", "application/vnd.cab-jscript"));
    ContType.insert(std::make_pair("vnd.canon-cpdl", "application/vnd.canon-cpdl"));
    ContType.insert(std::make_pair("vnd.canon-lips", "application/vnd.canon-lips"));
    ContType.insert(std::make_pair("vnd.capasystems-pg+json", "application/vnd.capasystems-pg+json"));
    ContType.insert(std::make_pair("vnd.cendio.thinlinc.clientconf", "application/vnd.cendio.thinlinc.clientconf"));
    ContType.insert(std::make_pair("vnd.century-systems.tcp_stream", "application/vnd.century-systems.tcp_stream"));
    ContType.insert(std::make_pair("vnd.chemdraw+xml", "application/vnd.chemdraw+xml"));
    ContType.insert(std::make_pair("vnd.chess-pgn", "application/vnd.chess-pgn"));
    ContType.insert(std::make_pair("vnd.chipnuts.karaoke-mmd", "application/vnd.chipnuts.karaoke-mmd"));
    ContType.insert(std::make_pair("vnd.ciedi", "application/vnd.ciedi"));
    ContType.insert(std::make_pair("vnd.cinderella", "application/vnd.cinderella"));
    ContType.insert(std::make_pair("vnd.cirpack.isdn-ext", "application/vnd.cirpack.isdn-ext"));
    ContType.insert(std::make_pair("vnd.citationstyles.style+xml", "application/vnd.citationstyles.style+xml"));
    ContType.insert(std::make_pair("vnd.claymore", "application/vnd.claymore"));
    ContType.insert(std::make_pair("vnd.cloanto.rp9", "application/vnd.cloanto.rp9"));
    ContType.insert(std::make_pair("vnd.clonk.c4group", "application/vnd.clonk.c4group"));
    ContType.insert(std::make_pair("vnd.cluetrust.cartomobile-config", "application/vnd.cluetrust.cartomobile-config"));
    ContType.insert(std::make_pair("vnd.cluetrust.cartomobile-config-pkg", "application/vnd.cluetrust.cartomobile-config-pkg"));
    ContType.insert(std::make_pair("vnd.coffeescript", "application/vnd.coffeescript"));
    ContType.insert(std::make_pair("vnd.collabio.xodocuments.document", "application/vnd.collabio.xodocuments.document"));
    ContType.insert(std::make_pair("vnd.collabio.xodocuments.document-template", "application/vnd.collabio.xodocuments.document-template"));
    ContType.insert(std::make_pair("vnd.collabio.xodocuments.presentation", "application/vnd.collabio.xodocuments.presentation"));
    ContType.insert(std::make_pair("vnd.collabio.xodocuments.presentation-template", "application/vnd.collabio.xodocuments.presentation-template"));
    ContType.insert(std::make_pair("vnd.collabio.xodocuments.spreadsheet", "application/vnd.collabio.xodocuments.spreadsheet"));
    ContType.insert(std::make_pair("vnd.collabio.xodocuments.spreadsheet-template", "application/vnd.collabio.xodocuments.spreadsheet-template"));
    ContType.insert(std::make_pair("vnd.collection.doc+json", "application/vnd.collection.doc+json"));
    ContType.insert(std::make_pair("vnd.collection+json", "application/vnd.collection+json"));
    ContType.insert(std::make_pair("vnd.collection.next+json", "application/vnd.collection.next+json"));
    ContType.insert(std::make_pair("vnd.comicbook-rar", "application/vnd.comicbook-rar"));
    ContType.insert(std::make_pair("vnd.comicbook+zip", "application/vnd.comicbook+zip"));
    ContType.insert(std::make_pair("vnd.commerce-battelle", "application/vnd.commerce-battelle"));
    ContType.insert(std::make_pair("vnd.commonspace", "application/vnd.commonspace"));
    ContType.insert(std::make_pair("vnd.coreos.ignition+json", "application/vnd.coreos.ignition+json"));
    ContType.insert(std::make_pair("vnd.cosmocaller", "application/vnd.cosmocaller"));
    ContType.insert(std::make_pair("vnd.contact.cmsg", "application/vnd.contact.cmsg"));
    ContType.insert(std::make_pair("vnd.crick.clicker", "application/vnd.crick.clicker"));
    ContType.insert(std::make_pair("vnd.crick.clicker.keyboard", "application/vnd.crick.clicker.keyboard"));
    ContType.insert(std::make_pair("vnd.crick.clicker.palette", "application/vnd.crick.clicker.palette"));
    ContType.insert(std::make_pair("vnd.crick.clicker.template", "application/vnd.crick.clicker.template"));
    ContType.insert(std::make_pair("vnd.crick.clicker.wordbank", "application/vnd.crick.clicker.wordbank"));
    ContType.insert(std::make_pair("vnd.criticaltools.wbs+xml", "application/vnd.criticaltools.wbs+xml"));
    ContType.insert(std::make_pair("vnd.cryptii.pipe+json", "application/vnd.cryptii.pipe+json"));
    ContType.insert(std::make_pair("vnd.crypto-shade-file", "application/vnd.crypto-shade-file"));
    ContType.insert(std::make_pair("vnd.cryptomator.encrypted", "application/vnd.cryptomator.encrypted"));
    ContType.insert(std::make_pair("vnd.cryptomator.vault", "application/vnd.cryptomator.vault"));
    ContType.insert(std::make_pair("vnd.ctc-posml", "application/vnd.ctc-posml"));
    ContType.insert(std::make_pair("vnd.ctct.ws+xml", "application/vnd.ctct.ws+xml"));
    ContType.insert(std::make_pair("vnd.cups-pdf", "application/vnd.cups-pdf"));
    ContType.insert(std::make_pair("vnd.cups-postscript", "application/vnd.cups-postscript"));
    ContType.insert(std::make_pair("vnd.cups-ppd", "application/vnd.cups-ppd"));
    ContType.insert(std::make_pair("vnd.cups-raster", "application/vnd.cups-raster"));
    ContType.insert(std::make_pair("vnd.cups-raw", "application/vnd.cups-raw"));
    ContType.insert(std::make_pair("vnd.curl", "application/vnd.curl"));
    ContType.insert(std::make_pair("vnd.cyan.dean.root+xml", "application/vnd.cyan.dean.root+xml"));
    ContType.insert(std::make_pair("vnd.cybank", "application/vnd.cybank"));
    ContType.insert(std::make_pair("vnd.cyclonedx+json", "application/vnd.cyclonedx+json"));
    ContType.insert(std::make_pair("vnd.cyclonedx+xml", "application/vnd.cyclonedx+xml"));
    ContType.insert(std::make_pair("vnd.d2l.coursepackage1p0+zip", "application/vnd.d2l.coursepackage1p0+zip"));
    ContType.insert(std::make_pair("vnd.d3m-dataset", "application/vnd.d3m-dataset"));
    ContType.insert(std::make_pair("vnd.d3m-problem", "application/vnd.d3m-problem"));
    ContType.insert(std::make_pair("vnd.dart", "application/vnd.dart"));
    ContType.insert(std::make_pair("vnd.data-vision.rdz", "application/vnd.data-vision.rdz"));
    ContType.insert(std::make_pair("vnd.datapackage+json", "application/vnd.datapackage+json"));
    ContType.insert(std::make_pair("vnd.dataresource+json", "application/vnd.dataresource+json"));
    ContType.insert(std::make_pair("vnd.dbf", "application/vnd.dbf"));
    ContType.insert(std::make_pair("vnd.debian.binary-package", "application/vnd.debian.binary-package"));
    ContType.insert(std::make_pair("vnd.dece.data", "application/vnd.dece.data"));
    ContType.insert(std::make_pair("vnd.dece.ttml+xml", "application/vnd.dece.ttml+xml"));
    ContType.insert(std::make_pair("vnd.dece.unspecified", "application/vnd.dece.unspecified"));
    ContType.insert(std::make_pair("vnd.dece.zip", "application/vnd.dece.zip"));
    ContType.insert(std::make_pair("vnd.denovo.fcselayout-link", "application/vnd.denovo.fcselayout-link"));
    ContType.insert(std::make_pair("vnd.desmume.movie", "application/vnd.desmume.movie"));
    ContType.insert(std::make_pair("vnd.dir-bi.plate-dl-nosuffix", "application/vnd.dir-bi.plate-dl-nosuffix"));
    ContType.insert(std::make_pair("vnd.dm.delegation+xml", "application/vnd.dm.delegation+xml"));
    ContType.insert(std::make_pair("vnd.dna", "application/vnd.dna"));
    ContType.insert(std::make_pair("vnd.document+json", "application/vnd.document+json"));
    ContType.insert(std::make_pair("vnd.dolby.mobile.1", "application/vnd.dolby.mobile.1"));
    ContType.insert(std::make_pair("vnd.dolby.mobile.2", "application/vnd.dolby.mobile.2"));
    ContType.insert(std::make_pair("vnd.doremir.scorecloud-binary-document", "application/vnd.doremir.scorecloud-binary-document"));
    ContType.insert(std::make_pair("vnd.dpgraph", "application/vnd.dpgraph"));
    ContType.insert(std::make_pair("vnd.dreamfactory", "application/vnd.dreamfactory"));
    ContType.insert(std::make_pair("vnd.drive+json", "application/vnd.drive+json"));
    ContType.insert(std::make_pair("vnd.dtg.local", "application/vnd.dtg.local"));
    ContType.insert(std::make_pair("vnd.dtg.local.flash", "application/vnd.dtg.local.flash"));
    ContType.insert(std::make_pair("vnd.dtg.local.html", "application/vnd.dtg.local.html"));
    ContType.insert(std::make_pair("vnd.dvb.ait", "application/vnd.dvb.ait"));
    ContType.insert(std::make_pair("vnd.dvb.dvbisl+xml", "application/vnd.dvb.dvbisl+xml"));
    ContType.insert(std::make_pair("vnd.dvb.dvbj", "application/vnd.dvb.dvbj"));
    ContType.insert(std::make_pair("vnd.dvb.esgcontainer", "application/vnd.dvb.esgcontainer"));
    ContType.insert(std::make_pair("vnd.dvb.ipdcdftnotifaccess", "application/vnd.dvb.ipdcdftnotifaccess"));
    ContType.insert(std::make_pair("vnd.dvb.ipdcesgaccess", "application/vnd.dvb.ipdcesgaccess"));
    ContType.insert(std::make_pair("vnd.dvb.ipdcesgaccess2", "application/vnd.dvb.ipdcesgaccess2"));
    ContType.insert(std::make_pair("vnd.dvb.ipdcesgpdd", "application/vnd.dvb.ipdcesgpdd"));
    ContType.insert(std::make_pair("vnd.dvb.ipdcroaming", "application/vnd.dvb.ipdcroaming"));
    ContType.insert(std::make_pair("vnd.dvb.iptv.alfec-base", "application/vnd.dvb.iptv.alfec-base"));
    ContType.insert(std::make_pair("vnd.dvb.iptv.alfec-enhancement", "application/vnd.dvb.iptv.alfec-enhancement"));
    ContType.insert(std::make_pair("vnd.dvb.notif-aggregate-root+xml", "application/vnd.dvb.notif-aggregate-root+xml"));
    ContType.insert(std::make_pair("vnd.dvb.notif-container+xml", "application/vnd.dvb.notif-container+xml"));
    ContType.insert(std::make_pair("vnd.dvb.notif-generic+xml", "application/vnd.dvb.notif-generic+xml"));
    ContType.insert(std::make_pair("vnd.dvb.notif-ia-msglist+xml", "application/vnd.dvb.notif-ia-msglist+xml"));
    ContType.insert(std::make_pair("vnd.dvb.notif-ia-registration-request+xml", "application/vnd.dvb.notif-ia-registration-request+xml"));
    ContType.insert(std::make_pair("vnd.dvb.notif-ia-registration-response+xml", "application/vnd.dvb.notif-ia-registration-response+xml"));
    ContType.insert(std::make_pair("vnd.dvb.notif-init+xml", "application/vnd.dvb.notif-init+xml"));
    ContType.insert(std::make_pair("vnd.dvb.pfr", "application/vnd.dvb.pfr"));
    ContType.insert(std::make_pair("vnd.dvb.service", "application/vnd.dvb.service"));
    ContType.insert(std::make_pair("vnd.dxr", "application/vnd.dxr"));
    ContType.insert(std::make_pair("vnd.dynageo", "application/vnd.dynageo"));
    ContType.insert(std::make_pair("vnd.dzr", "application/vnd.dzr"));
    ContType.insert(std::make_pair("vnd.easykaraoke.cdgdownload", "application/vnd.easykaraoke.cdgdownload"));
    ContType.insert(std::make_pair("vnd.ecip.rlp", "application/vnd.ecip.rlp"));
    ContType.insert(std::make_pair("vnd.ecdis-update", "application/vnd.ecdis-update"));
    ContType.insert(std::make_pair("vnd.eclipse.ditto+json", "application/vnd.eclipse.ditto+json"));
    ContType.insert(std::make_pair("vnd.ecowin.chart", "application/vnd.ecowin.chart"));
    ContType.insert(std::make_pair("vnd.ecowin.filerequest", "application/vnd.ecowin.filerequest"));
    ContType.insert(std::make_pair("vnd.ecowin.fileupdate", "application/vnd.ecowin.fileupdate"));
    ContType.insert(std::make_pair("vnd.ecowin.series", "application/vnd.ecowin.series"));
    ContType.insert(std::make_pair("vnd.ecowin.seriesrequest", "application/vnd.ecowin.seriesrequest"));
    ContType.insert(std::make_pair("vnd.ecowin.seriesupdate", "application/vnd.ecowin.seriesupdate"));
    ContType.insert(std::make_pair("vnd.efi.img", "application/vnd.efi.img"));
    ContType.insert(std::make_pair("vnd.efi.iso", "application/vnd.efi.iso"));
    ContType.insert(std::make_pair("vnd.emclient.accessrequest+xml", "application/vnd.emclient.accessrequest+xml"));
    ContType.insert(std::make_pair("vnd.enliven", "application/vnd.enliven"));
    ContType.insert(std::make_pair("vnd.enphase.envoy", "application/vnd.enphase.envoy"));
    ContType.insert(std::make_pair("vnd.eprints.data+xml", "application/vnd.eprints.data+xml"));
    ContType.insert(std::make_pair("vnd.epson.esf", "application/vnd.epson.esf"));
    ContType.insert(std::make_pair("vnd.epson.msf", "application/vnd.epson.msf"));
    ContType.insert(std::make_pair("vnd.epson.quickanime", "application/vnd.epson.quickanime"));
    ContType.insert(std::make_pair("vnd.epson.salt", "application/vnd.epson.salt"));
    ContType.insert(std::make_pair("vnd.epson.ssf", "application/vnd.epson.ssf"));
    ContType.insert(std::make_pair("vnd.ericsson.quickcall", "application/vnd.ericsson.quickcall"));
    ContType.insert(std::make_pair("vnd.espass-espass+zip", "application/vnd.espass-espass+zip"));
    ContType.insert(std::make_pair("vnd.eszigno3+xml", "application/vnd.eszigno3+xml"));
    ContType.insert(std::make_pair("vnd.etsi.aoc+xml", "application/vnd.etsi.aoc+xml"));
    ContType.insert(std::make_pair("vnd.etsi.asic-s+zip", "application/vnd.etsi.asic-s+zip"));
    ContType.insert(std::make_pair("vnd.etsi.asic-e+zip", "application/vnd.etsi.asic-e+zip"));
    ContType.insert(std::make_pair("vnd.etsi.cug+xml", "application/vnd.etsi.cug+xml"));
    ContType.insert(std::make_pair("vnd.etsi.iptvcommand+xml", "application/vnd.etsi.iptvcommand+xml"));
    ContType.insert(std::make_pair("vnd.etsi.iptvdiscovery+xml", "application/vnd.etsi.iptvdiscovery+xml"));
    ContType.insert(std::make_pair("vnd.etsi.iptvprofile+xml", "application/vnd.etsi.iptvprofile+xml"));
    ContType.insert(std::make_pair("vnd.etsi.iptvsad-bc+xml", "application/vnd.etsi.iptvsad-bc+xml"));
    ContType.insert(std::make_pair("vnd.etsi.iptvsad-cod+xml", "application/vnd.etsi.iptvsad-cod+xml"));
    ContType.insert(std::make_pair("vnd.etsi.iptvsad-npvr+xml", "application/vnd.etsi.iptvsad-npvr+xml"));
    ContType.insert(std::make_pair("vnd.etsi.iptvservice+xml", "application/vnd.etsi.iptvservice+xml"));
    ContType.insert(std::make_pair("vnd.etsi.iptvsync+xml", "application/vnd.etsi.iptvsync+xml"));
    ContType.insert(std::make_pair("vnd.etsi.iptvueprofile+xml", "application/vnd.etsi.iptvueprofile+xml"));
    ContType.insert(std::make_pair("vnd.etsi.mcid+xml", "application/vnd.etsi.mcid+xml"));
    ContType.insert(std::make_pair("vnd.etsi.mheg5", "application/vnd.etsi.mheg5"));
    ContType.insert(std::make_pair("vnd.etsi.overload-control-policy-dataset+xml", "application/vnd.etsi.overload-control-policy-dataset+xml"));
    ContType.insert(std::make_pair("vnd.etsi.pstn+xml", "application/vnd.etsi.pstn+xml"));
    ContType.insert(std::make_pair("vnd.etsi.sci+xml", "application/vnd.etsi.sci+xml"));
    ContType.insert(std::make_pair("vnd.etsi.simservs+xml", "application/vnd.etsi.simservs+xml"));
    ContType.insert(std::make_pair("vnd.etsi.timestamp-token", "application/vnd.etsi.timestamp-token"));
    ContType.insert(std::make_pair("vnd.etsi.tsl+xml", "application/vnd.etsi.tsl+xml"));
    ContType.insert(std::make_pair("vnd.etsi.tsl.der", "application/vnd.etsi.tsl.der"));
    ContType.insert(std::make_pair("vnd.eu.kasparian.car+json", "application/vnd.eu.kasparian.car+json"));
    ContType.insert(std::make_pair("vnd.eudora.data", "application/vnd.eudora.data"));
    ContType.insert(std::make_pair("vnd.evolv.ecig.profile", "application/vnd.evolv.ecig.profile"));
    ContType.insert(std::make_pair("vnd.evolv.ecig.settings", "application/vnd.evolv.ecig.settings"));
    ContType.insert(std::make_pair("vnd.evolv.ecig.theme", "application/vnd.evolv.ecig.theme"));
    ContType.insert(std::make_pair("vnd.exstream-empower+zip", "application/vnd.exstream-empower+zip"));
    ContType.insert(std::make_pair("vnd.exstream-package", "application/vnd.exstream-package"));
    ContType.insert(std::make_pair("vnd.ezpix-album", "application/vnd.ezpix-album"));
    ContType.insert(std::make_pair("vnd.ezpix-package", "application/vnd.ezpix-package"));
    ContType.insert(std::make_pair("vnd.f-secure.mobile", "application/vnd.f-secure.mobile"));
    ContType.insert(std::make_pair("vnd.fastcopy-disk-image", "application/vnd.fastcopy-disk-image"));
    ContType.insert(std::make_pair("vnd.familysearch.gedcom+zip", "application/vnd.familysearch.gedcom+zip"));
    ContType.insert(std::make_pair("vnd.fdf", "application/vnd.fdf"));
    ContType.insert(std::make_pair("vnd.fdsn.mseed", "application/vnd.fdsn.mseed"));
    ContType.insert(std::make_pair("vnd.fdsn.seed", "application/vnd.fdsn.seed"));
    ContType.insert(std::make_pair("vnd.ffsns", "application/vnd.ffsns"));
    ContType.insert(std::make_pair("vnd.ficlab.flb+zip", "application/vnd.ficlab.flb+zip"));
    ContType.insert(std::make_pair("vnd.filmit.zfc", "application/vnd.filmit.zfc"));
    ContType.insert(std::make_pair("vnd.fints", "application/vnd.fints"));
    ContType.insert(std::make_pair("vnd.firemonkeys.cloudcell", "application/vnd.firemonkeys.cloudcell"));
    ContType.insert(std::make_pair("vnd.FloGraphIt", "application/vnd.FloGraphIt"));
    ContType.insert(std::make_pair("vnd.fluxtime.clip", "application/vnd.fluxtime.clip"));
    ContType.insert(std::make_pair("vnd.font-fontforge-sfd", "application/vnd.font-fontforge-sfd"));
    ContType.insert(std::make_pair("vnd.framemaker", "application/vnd.framemaker"));
    ContType.insert(std::make_pair("vnd.frogans.fnc (OBSOLETE)", "application/vnd.frogans.fnc"));
    ContType.insert(std::make_pair("vnd.frogans.ltf (OBSOLETE)", "application/vnd.frogans.ltf"));
    ContType.insert(std::make_pair("vnd.fsc.weblaunch", "application/vnd.fsc.weblaunch"));
    ContType.insert(std::make_pair("vnd.fujifilm.fb.docuworks", "application/vnd.fujifilm.fb.docuworks"));
    ContType.insert(std::make_pair("vnd.fujifilm.fb.docuworks.binder", "application/vnd.fujifilm.fb.docuworks.binder"));
    ContType.insert(std::make_pair("vnd.fujifilm.fb.docuworks.container", "application/vnd.fujifilm.fb.docuworks.container"));
    ContType.insert(std::make_pair("vnd.fujifilm.fb.jfi+xml", "application/vnd.fujifilm.fb.jfi+xml"));
    ContType.insert(std::make_pair("vnd.fujitsu.oasys", "application/vnd.fujitsu.oasys"));
    ContType.insert(std::make_pair("vnd.fujitsu.oasys2", "application/vnd.fujitsu.oasys2"));
    ContType.insert(std::make_pair("vnd.fujitsu.oasys3", "application/vnd.fujitsu.oasys3"));
    ContType.insert(std::make_pair("vnd.fujitsu.oasysgp", "application/vnd.fujitsu.oasysgp"));
    ContType.insert(std::make_pair("vnd.fujitsu.oasysprs", "application/vnd.fujitsu.oasysprs"));
    ContType.insert(std::make_pair("vnd.fujixerox.ART4", "application/vnd.fujixerox.ART4"));
    ContType.insert(std::make_pair("vnd.fujixerox.ART-EX", "application/vnd.fujixerox.ART-EX"));
    ContType.insert(std::make_pair("vnd.fujixerox.ddd", "application/vnd.fujixerox.ddd"));
    ContType.insert(std::make_pair("vnd.fujixerox.docuworks", "application/vnd.fujixerox.docuworks"));
    ContType.insert(std::make_pair("vnd.fujixerox.docuworks.binder", "application/vnd.fujixerox.docuworks.binder"));
    ContType.insert(std::make_pair("vnd.fujixerox.docuworks.container", "application/vnd.fujixerox.docuworks.container"));
    ContType.insert(std::make_pair("vnd.fujixerox.HBPL", "application/vnd.fujixerox.HBPL"));
    ContType.insert(std::make_pair("vnd.fut-misnet", "application/vnd.fut-misnet"));
    ContType.insert(std::make_pair("vnd.futoin+cbor", "application/vnd.futoin+cbor"));
    ContType.insert(std::make_pair("vnd.futoin+json", "application/vnd.futoin+json"));
    ContType.insert(std::make_pair("vnd.fuzzysheet", "application/vnd.fuzzysheet"));
    ContType.insert(std::make_pair("vnd.genomatix.tuxedo", "application/vnd.genomatix.tuxedo"));
    ContType.insert(std::make_pair("vnd.gentics.grd+json", "application/vnd.gentics.grd+json"));
    ContType.insert(std::make_pair("vnd.geo+json (OBSOLETED by [RFC7946] in favor of application/geo+json)", "application/vnd.geo+json"));
    ContType.insert(std::make_pair("vnd.geocube+xml (OBSOLETED by request)", "application/vnd.geocube+xml"));
    ContType.insert(std::make_pair("vnd.geogebra.file", "application/vnd.geogebra.file"));
    ContType.insert(std::make_pair("vnd.geogebra.slides", "application/vnd.geogebra.slides"));
    ContType.insert(std::make_pair("vnd.geogebra.tool", "application/vnd.geogebra.tool"));
    ContType.insert(std::make_pair("vnd.geometry-explorer", "application/vnd.geometry-explorer"));
    ContType.insert(std::make_pair("vnd.geonext", "application/vnd.geonext"));
    ContType.insert(std::make_pair("vnd.geoplan", "application/vnd.geoplan"));
    ContType.insert(std::make_pair("vnd.geospace", "application/vnd.geospace"));
    ContType.insert(std::make_pair("vnd.gerber", "application/vnd.gerber"));
    ContType.insert(std::make_pair("vnd.globalplatform.card-content-mgt", "application/vnd.globalplatform.card-content-mgt"));
    ContType.insert(std::make_pair("vnd.globalplatform.card-content-mgt-response", "application/vnd.globalplatform.card-content-mgt-response"));
    ContType.insert(std::make_pair("vnd.gmx - DEPRECATED", "application/vnd.gmx"));
    ContType.insert(std::make_pair("vnd.google-earth.kml+xml", "application/vnd.google-earth.kml+xml"));
    ContType.insert(std::make_pair("vnd.google-earth.kmz", "application/vnd.google-earth.kmz"));
    ContType.insert(std::make_pair("vnd.gov.sk.e-form+xml", "application/vnd.gov.sk.e-form+xml"));
    ContType.insert(std::make_pair("vnd.gov.sk.e-form+zip", "application/vnd.gov.sk.e-form+zip"));
    ContType.insert(std::make_pair("vnd.gov.sk.xmldatacontainer+xml", "application/vnd.gov.sk.xmldatacontainer+xml"));
    ContType.insert(std::make_pair("vnd.grafeq", "application/vnd.grafeq"));
    ContType.insert(std::make_pair("vnd.gridmp", "application/vnd.gridmp"));
    ContType.insert(std::make_pair("vnd.groove-account", "application/vnd.groove-account"));
    ContType.insert(std::make_pair("vnd.groove-help", "application/vnd.groove-help"));
    ContType.insert(std::make_pair("vnd.groove-identity-message", "application/vnd.groove-identity-message"));
    ContType.insert(std::make_pair("vnd.groove-injector", "application/vnd.groove-injector"));
    ContType.insert(std::make_pair("vnd.groove-tool-message", "application/vnd.groove-tool-message"));
    ContType.insert(std::make_pair("vnd.groove-tool-template", "application/vnd.groove-tool-template"));
    ContType.insert(std::make_pair("vnd.groove-vcard", "application/vnd.groove-vcard"));
    ContType.insert(std::make_pair("vnd.hal+json", "application/vnd.hal+json"));
    ContType.insert(std::make_pair("vnd.hal+xml", "application/vnd.hal+xml"));
    ContType.insert(std::make_pair("vnd.HandHeld-Entertainment+xml", "application/vnd.HandHeld-Entertainment+xml"));
    ContType.insert(std::make_pair("vnd.hbci", "application/vnd.hbci"));
    ContType.insert(std::make_pair("vnd.hc+json", "application/vnd.hc+json"));
    ContType.insert(std::make_pair("vnd.hcl-bireports", "application/vnd.hcl-bireports"));
    ContType.insert(std::make_pair("vnd.hdt", "application/vnd.hdt"));
    ContType.insert(std::make_pair("vnd.heroku+json", "application/vnd.heroku+json"));
    ContType.insert(std::make_pair("vnd.hhe.lesson-player", "application/vnd.hhe.lesson-player"));
    ContType.insert(std::make_pair("vnd.hl7cda+xml", "application/vnd.hl7cda+xml"));
    ContType.insert(std::make_pair("vnd.hl7v2+xml", "application/vnd.hl7v2+xml"));
    ContType.insert(std::make_pair("vnd.hp-HPGL", "application/vnd.hp-HPGL"));
    ContType.insert(std::make_pair("vnd.hp-hpid", "application/vnd.hp-hpid"));
    ContType.insert(std::make_pair("vnd.hp-hps", "application/vnd.hp-hps"));
    ContType.insert(std::make_pair("vnd.hp-jlyt", "application/vnd.hp-jlyt"));
    ContType.insert(std::make_pair("vnd.hp-PCL", "application/vnd.hp-PCL"));
    ContType.insert(std::make_pair("vnd.hp-PCLXL", "application/vnd.hp-PCLXL"));
    ContType.insert(std::make_pair("vnd.httphone", "application/vnd.httphone"));
    ContType.insert(std::make_pair("vnd.hydrostatix.sof-data", "application/vnd.hydrostatix.sof-data"));
    ContType.insert(std::make_pair("vnd.hyper-item+json", "application/vnd.hyper-item+json"));
    ContType.insert(std::make_pair("vnd.hyper+json", "application/vnd.hyper+json"));
    ContType.insert(std::make_pair("vnd.hyperdrive+json", "application/vnd.hyperdrive+json"));
    ContType.insert(std::make_pair("vnd.hzn-3d-crossword", "application/vnd.hzn-3d-crossword"));
    ContType.insert(std::make_pair("vnd.ibm.afplinedata (OBSOLETED in favor of vnd.afpc.afplinedata)", "application/vnd.ibm.afplinedata"));
    ContType.insert(std::make_pair("vnd.ibm.electronic-media", "application/vnd.ibm.electronic-media"));
    ContType.insert(std::make_pair("vnd.ibm.MiniPay", "application/vnd.ibm.MiniPay"));
    ContType.insert(std::make_pair("vnd.ibm.modcap (OBSOLETED in favor of application/vnd.afpc.modca)", "application/vnd.ibm.modcap"));
    ContType.insert(std::make_pair("vnd.ibm.rights-management", "application/vnd.ibm.rights-management"));
    ContType.insert(std::make_pair("vnd.ibm.secure-container", "application/vnd.ibm.secure-container"));
    ContType.insert(std::make_pair("vnd.iccprofile", "application/vnd.iccprofile"));
    ContType.insert(std::make_pair("vnd.ieee.1905", "application/vnd.ieee.1905"));
    ContType.insert(std::make_pair("vnd.igloader", "application/vnd.igloader"));
    ContType.insert(std::make_pair("vnd.imagemeter.folder+zip", "application/vnd.imagemeter.folder+zip"));
    ContType.insert(std::make_pair("vnd.imagemeter.image+zip", "application/vnd.imagemeter.image+zip"));
    ContType.insert(std::make_pair("vnd.immervision-ivp", "application/vnd.immervision-ivp"));
    ContType.insert(std::make_pair("vnd.immervision-ivu", "application/vnd.immervision-ivu"));
    ContType.insert(std::make_pair("vnd.ims.imsccv1p1", "application/vnd.ims.imsccv1p1"));
    ContType.insert(std::make_pair("vnd.ims.imsccv1p2", "application/vnd.ims.imsccv1p2"));
    ContType.insert(std::make_pair("vnd.ims.imsccv1p3", "application/vnd.ims.imsccv1p3"));
    ContType.insert(std::make_pair("vnd.ims.lis.v2.result+json", "application/vnd.ims.lis.v2.result+json"));
    ContType.insert(std::make_pair("vnd.ims.lti.v2.toolconsumerprofile+json", "application/vnd.ims.lti.v2.toolconsumerprofile+json"));
    ContType.insert(std::make_pair("vnd.ims.lti.v2.toolproxy.id+json", "application/vnd.ims.lti.v2.toolproxy.id+json"));
    ContType.insert(std::make_pair("vnd.ims.lti.v2.toolproxy+json", "application/vnd.ims.lti.v2.toolproxy+json"));
    ContType.insert(std::make_pair("vnd.ims.lti.v2.toolsettings+json", "application/vnd.ims.lti.v2.toolsettings+json"));
    ContType.insert(std::make_pair("vnd.ims.lti.v2.toolsettings.simple+json", "application/vnd.ims.lti.v2.toolsettings.simple+json"));
    ContType.insert(std::make_pair("vnd.informedcontrol.rms+xml", "application/vnd.informedcontrol.rms+xml"));
    ContType.insert(std::make_pair("vnd.infotech.project", "application/vnd.infotech.project"));
    ContType.insert(std::make_pair("vnd.infotech.project+xml", "application/vnd.infotech.project+xml"));
    ContType.insert(std::make_pair("vnd.informix-visionary (OBSOLETED in favor of application/vnd.visionary)", "application/vnd.informix-visionary"));
    ContType.insert(std::make_pair("vnd.innopath.wamp.notification", "application/vnd.innopath.wamp.notification"));
    ContType.insert(std::make_pair("vnd.insors.igm", "application/vnd.insors.igm"));
    ContType.insert(std::make_pair("vnd.intercon.formnet", "application/vnd.intercon.formnet"));
    ContType.insert(std::make_pair("vnd.intergeo", "application/vnd.intergeo"));
    ContType.insert(std::make_pair("vnd.intertrust.digibox", "application/vnd.intertrust.digibox"));
    ContType.insert(std::make_pair("vnd.intertrust.nncp", "application/vnd.intertrust.nncp"));
    ContType.insert(std::make_pair("vnd.intu.qbo", "application/vnd.intu.qbo"));
    ContType.insert(std::make_pair("vnd.intu.qfx", "application/vnd.intu.qfx"));
    ContType.insert(std::make_pair("vnd.iptc.g2.catalogitem+xml", "application/vnd.iptc.g2.catalogitem+xml"));
    ContType.insert(std::make_pair("vnd.iptc.g2.conceptitem+xml", "application/vnd.iptc.g2.conceptitem+xml"));
    ContType.insert(std::make_pair("vnd.iptc.g2.knowledgeitem+xml", "application/vnd.iptc.g2.knowledgeitem+xml"));
    ContType.insert(std::make_pair("vnd.iptc.g2.newsitem+xml", "application/vnd.iptc.g2.newsitem+xml"));
    ContType.insert(std::make_pair("vnd.iptc.g2.newsmessage+xml", "application/vnd.iptc.g2.newsmessage+xml"));
    ContType.insert(std::make_pair("vnd.iptc.g2.packageitem+xml", "application/vnd.iptc.g2.packageitem+xml"));
    ContType.insert(std::make_pair("vnd.iptc.g2.planningitem+xml", "application/vnd.iptc.g2.planningitem+xml"));
    ContType.insert(std::make_pair("vnd.ipunplugged.rcprofile", "application/vnd.ipunplugged.rcprofile"));
    ContType.insert(std::make_pair("vnd.irepository.package+xml", "application/vnd.irepository.package+xml"));
    ContType.insert(std::make_pair("vnd.is-xpr", "application/vnd.is-xpr"));
    ContType.insert(std::make_pair("vnd.isac.fcs", "application/vnd.isac.fcs"));
    ContType.insert(std::make_pair("vnd.jam", "application/vnd.jam"));
    ContType.insert(std::make_pair("vnd.iso11783-10+zip", "application/vnd.iso11783-10+zip"));
    ContType.insert(std::make_pair("vnd.japannet-directory-service", "application/vnd.japannet-directory-service"));
    ContType.insert(std::make_pair("vnd.japannet-jpnstore-wakeup", "application/vnd.japannet-jpnstore-wakeup"));
    ContType.insert(std::make_pair("vnd.japannet-payment-wakeup", "application/vnd.japannet-payment-wakeup"));
    ContType.insert(std::make_pair("vnd.japannet-registration", "application/vnd.japannet-registration"));
    ContType.insert(std::make_pair("vnd.japannet-registration-wakeup", "application/vnd.japannet-registration-wakeup"));
    ContType.insert(std::make_pair("vnd.japannet-setstore-wakeup", "application/vnd.japannet-setstore-wakeup"));
    ContType.insert(std::make_pair("vnd.japannet-verification", "application/vnd.japannet-verification"));
    ContType.insert(std::make_pair("vnd.japannet-verification-wakeup", "application/vnd.japannet-verification-wakeup"));
    ContType.insert(std::make_pair("vnd.jcp.javame.midlet-rms", "application/vnd.jcp.javame.midlet-rms"));
    ContType.insert(std::make_pair("vnd.jisp", "application/vnd.jisp"));
    ContType.insert(std::make_pair("vnd.joost.joda-archive", "application/vnd.joost.joda-archive"));
    ContType.insert(std::make_pair("vnd.jsk.isdn-ngn", "application/vnd.jsk.isdn-ngn"));
    ContType.insert(std::make_pair("vnd.kahootz", "application/vnd.kahootz"));
    ContType.insert(std::make_pair("vnd.kde.karbon", "application/vnd.kde.karbon"));
    ContType.insert(std::make_pair("vnd.kde.kchart", "application/vnd.kde.kchart"));
    ContType.insert(std::make_pair("vnd.kde.kformula", "application/vnd.kde.kformula"));
    ContType.insert(std::make_pair("vnd.kde.kivio", "application/vnd.kde.kivio"));
    ContType.insert(std::make_pair("vnd.kde.kontour", "application/vnd.kde.kontour"));
    ContType.insert(std::make_pair("vnd.kde.kpresenter", "application/vnd.kde.kpresenter"));
    ContType.insert(std::make_pair("vnd.kde.kspread", "application/vnd.kde.kspread"));
    ContType.insert(std::make_pair("vnd.kde.kword", "application/vnd.kde.kword"));
    ContType.insert(std::make_pair("vnd.kenameaapp", "application/vnd.kenameaapp"));
    ContType.insert(std::make_pair("vnd.kidspiration", "application/vnd.kidspiration"));
    ContType.insert(std::make_pair("vnd.Kinar", "application/vnd.Kinar"));
    ContType.insert(std::make_pair("vnd.koan", "application/vnd.koan"));
    ContType.insert(std::make_pair("vnd.kodak-descriptor", "application/vnd.kodak-descriptor"));
    ContType.insert(std::make_pair("vnd.las", "application/vnd.las"));
    ContType.insert(std::make_pair("vnd.las.las+json", "application/vnd.las.las+json"));
    ContType.insert(std::make_pair("vnd.las.las+xml", "application/vnd.las.las+xml"));
    ContType.insert(std::make_pair("vnd.laszip", "application/vnd.laszip"));
    ContType.insert(std::make_pair("vnd.leap+json", "application/vnd.leap+json"));
    ContType.insert(std::make_pair("vnd.liberty-request+xml", "application/vnd.liberty-request+xml"));
    ContType.insert(std::make_pair("vnd.llamagraphics.life-balance.desktop", "application/vnd.llamagraphics.life-balance.desktop"));
    ContType.insert(std::make_pair("vnd.llamagraphics.life-balance.exchange+xml", "application/vnd.llamagraphics.life-balance.exchange+xml"));
    ContType.insert(std::make_pair("vnd.logipipe.circuit+zip", "application/vnd.logipipe.circuit+zip"));
    ContType.insert(std::make_pair("vnd.loom", "application/vnd.loom"));
    ContType.insert(std::make_pair("vnd.lotus-1-2-3", "application/vnd.lotus-1-2-3"));
    ContType.insert(std::make_pair("vnd.lotus-approach", "application/vnd.lotus-approach"));
    ContType.insert(std::make_pair("vnd.lotus-freelance", "application/vnd.lotus-freelance"));
    ContType.insert(std::make_pair("vnd.lotus-notes", "application/vnd.lotus-notes"));
    ContType.insert(std::make_pair("vnd.lotus-organizer", "application/vnd.lotus-organizer"));
    ContType.insert(std::make_pair("vnd.lotus-screencam", "application/vnd.lotus-screencam"));
    ContType.insert(std::make_pair("vnd.lotus-wordpro", "application/vnd.lotus-wordpro"));
    ContType.insert(std::make_pair("vnd.macports.portpkg", "application/vnd.macports.portpkg"));
    ContType.insert(std::make_pair("vnd.mapbox-vector-tile", "application/vnd.mapbox-vector-tile"));
    ContType.insert(std::make_pair("vnd.marlin.drm.actiontoken+xml", "application/vnd.marlin.drm.actiontoken+xml"));
    ContType.insert(std::make_pair("vnd.marlin.drm.conftoken+xml", "application/vnd.marlin.drm.conftoken+xml"));
    ContType.insert(std::make_pair("vnd.marlin.drm.license+xml", "application/vnd.marlin.drm.license+xml"));
    ContType.insert(std::make_pair("vnd.marlin.drm.mdcf", "application/vnd.marlin.drm.mdcf"));
    ContType.insert(std::make_pair("vnd.mason+json", "application/vnd.mason+json"));
    ContType.insert(std::make_pair("vnd.maxar.archive.3tz+zip", "application/vnd.maxar.archive.3tz+zip"));
    ContType.insert(std::make_pair("vnd.maxmind.maxmind-db", "application/vnd.maxmind.maxmind-db"));
    ContType.insert(std::make_pair("vnd.mcd", "application/vnd.mcd"));
    ContType.insert(std::make_pair("vnd.medcalcdata", "application/vnd.medcalcdata"));
    ContType.insert(std::make_pair("vnd.mediastation.cdkey", "application/vnd.mediastation.cdkey"));
    ContType.insert(std::make_pair("vnd.meridian-slingshot", "application/vnd.meridian-slingshot"));
    ContType.insert(std::make_pair("vnd.MFER", "application/vnd.MFER"));
    ContType.insert(std::make_pair("vnd.mfmp", "application/vnd.mfmp"));
    ContType.insert(std::make_pair("vnd.micro+json", "application/vnd.micro+json"));
    ContType.insert(std::make_pair("vnd.micrografx.flo", "application/vnd.micrografx.flo"));
    ContType.insert(std::make_pair("vnd.micrografx.igx", "application/vnd.micrografx.igx"));
    ContType.insert(std::make_pair("vnd.microsoft.portable-executable", "application/vnd.microsoft.portable-executable"));
    ContType.insert(std::make_pair("vnd.microsoft.windows.thumbnail-cache", "application/vnd.microsoft.windows.thumbnail-cache"));
    ContType.insert(std::make_pair("vnd.miele+json", "application/vnd.miele+json"));
    ContType.insert(std::make_pair("vnd.mif", "application/vnd.mif"));
    ContType.insert(std::make_pair("vnd.minisoft-hp3000-save", "application/vnd.minisoft-hp3000-save"));
    ContType.insert(std::make_pair("vnd.mitsubishi.misty-guard.trustweb", "application/vnd.mitsubishi.misty-guard.trustweb"));
    ContType.insert(std::make_pair("vnd.Mobius.DAF", "application/vnd.Mobius.DAF"));
    ContType.insert(std::make_pair("vnd.Mobius.DIS", "application/vnd.Mobius.DIS"));
    ContType.insert(std::make_pair("vnd.Mobius.MBK", "application/vnd.Mobius.MBK"));
    ContType.insert(std::make_pair("vnd.Mobius.MQY", "application/vnd.Mobius.MQY"));
    ContType.insert(std::make_pair("vnd.Mobius.MSL", "application/vnd.Mobius.MSL"));
    ContType.insert(std::make_pair("vnd.Mobius.PLC", "application/vnd.Mobius.PLC"));
    ContType.insert(std::make_pair("vnd.Mobius.TXF", "application/vnd.Mobius.TXF"));
    ContType.insert(std::make_pair("vnd.mophun.application", "application/vnd.mophun.application"));
    ContType.insert(std::make_pair("vnd.mophun.certificate", "application/vnd.mophun.certificate"));
    ContType.insert(std::make_pair("vnd.motorola.flexsuite", "application/vnd.motorola.flexsuite"));
    ContType.insert(std::make_pair("vnd.motorola.flexsuite.adsi", "application/vnd.motorola.flexsuite.adsi"));
    ContType.insert(std::make_pair("vnd.motorola.flexsuite.fis", "application/vnd.motorola.flexsuite.fis"));
    ContType.insert(std::make_pair("vnd.motorola.flexsuite.gotap", "application/vnd.motorola.flexsuite.gotap"));
    ContType.insert(std::make_pair("vnd.motorola.flexsuite.kmr", "application/vnd.motorola.flexsuite.kmr"));
    ContType.insert(std::make_pair("vnd.motorola.flexsuite.ttc", "application/vnd.motorola.flexsuite.ttc"));
    ContType.insert(std::make_pair("vnd.motorola.flexsuite.wem", "application/vnd.motorola.flexsuite.wem"));
    ContType.insert(std::make_pair("vnd.motorola.iprm", "application/vnd.motorola.iprm"));
    ContType.insert(std::make_pair("vnd.mozilla.xul+xml", "application/vnd.mozilla.xul+xml"));
    ContType.insert(std::make_pair("vnd.ms-artgalry", "application/vnd.ms-artgalry"));
    ContType.insert(std::make_pair("vnd.ms-asf", "application/vnd.ms-asf"));
    ContType.insert(std::make_pair("vnd.ms-cab-compressed", "application/vnd.ms-cab-compressed"));
    ContType.insert(std::make_pair("vnd.ms-3mfdocument", "application/vnd.ms-3mfdocument"));
    ContType.insert(std::make_pair("vnd.ms-excel", "application/vnd.ms-excel"));
    ContType.insert(std::make_pair("vnd.ms-excel.addin.macroEnabled.12", "application/vnd.ms-excel.addin.macroEnabled.12"));
    ContType.insert(std::make_pair("vnd.ms-excel.sheet.binary.macroEnabled.12", "application/vnd.ms-excel.sheet.binary.macroEnabled.12"));
    ContType.insert(std::make_pair("vnd.ms-excel.sheet.macroEnabled.12", "application/vnd.ms-excel.sheet.macroEnabled.12"));
    ContType.insert(std::make_pair("vnd.ms-excel.template.macroEnabled.12", "application/vnd.ms-excel.template.macroEnabled.12"));
    ContType.insert(std::make_pair("vnd.ms-fontobject", "application/vnd.ms-fontobject"));
    ContType.insert(std::make_pair("vnd.ms-htmlhelp", "application/vnd.ms-htmlhelp"));
    ContType.insert(std::make_pair("vnd.ms-ims", "application/vnd.ms-ims"));
    ContType.insert(std::make_pair("vnd.ms-lrm", "application/vnd.ms-lrm"));
    ContType.insert(std::make_pair("vnd.ms-office.activeX+xml", "application/vnd.ms-office.activeX+xml"));
    ContType.insert(std::make_pair("vnd.ms-officetheme", "application/vnd.ms-officetheme"));
    ContType.insert(std::make_pair("vnd.ms-playready.initiator+xml", "application/vnd.ms-playready.initiator+xml"));
    ContType.insert(std::make_pair("vnd.ms-powerpoint", "application/vnd.ms-powerpoint"));
    ContType.insert(std::make_pair("vnd.ms-powerpoint.addin.macroEnabled.12", "application/vnd.ms-powerpoint.addin.macroEnabled.12"));
    ContType.insert(std::make_pair("vnd.ms-powerpoint.presentation.macroEnabled.12", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"));
    ContType.insert(std::make_pair("vnd.ms-powerpoint.slide.macroEnabled.12", "application/vnd.ms-powerpoint.slide.macroEnabled.12"));
    ContType.insert(std::make_pair("vnd.ms-powerpoint.slideshow.macroEnabled.12", "application/vnd.ms-powerpoint.slideshow.macroEnabled.12"));
    ContType.insert(std::make_pair("vnd.ms-powerpoint.template.macroEnabled.12", "application/vnd.ms-powerpoint.template.macroEnabled.12"));
    ContType.insert(std::make_pair("vnd.ms-PrintDeviceCapabilities+xml", "application/vnd.ms-PrintDeviceCapabilities+xml"));
    ContType.insert(std::make_pair("vnd.ms-PrintSchemaTicket+xml", "application/vnd.ms-PrintSchemaTicket+xml"));
    ContType.insert(std::make_pair("vnd.ms-project", "application/vnd.ms-project"));
    ContType.insert(std::make_pair("vnd.ms-tnef", "application/vnd.ms-tnef"));
    ContType.insert(std::make_pair("vnd.ms-windows.devicepairing", "application/vnd.ms-windows.devicepairing"));
    ContType.insert(std::make_pair("vnd.ms-windows.nwprinting.oob", "application/vnd.ms-windows.nwprinting.oob"));
    ContType.insert(std::make_pair("vnd.ms-windows.printerpairing", "application/vnd.ms-windows.printerpairing"));
    ContType.insert(std::make_pair("vnd.ms-windows.wsd.oob", "application/vnd.ms-windows.wsd.oob"));
    ContType.insert(std::make_pair("vnd.ms-wmdrm.lic-chlg-req", "application/vnd.ms-wmdrm.lic-chlg-req"));
    ContType.insert(std::make_pair("vnd.ms-wmdrm.lic-resp", "application/vnd.ms-wmdrm.lic-resp"));
    ContType.insert(std::make_pair("vnd.ms-wmdrm.meter-chlg-req", "application/vnd.ms-wmdrm.meter-chlg-req"));
    ContType.insert(std::make_pair("vnd.ms-wmdrm.meter-resp", "application/vnd.ms-wmdrm.meter-resp"));
    ContType.insert(std::make_pair("vnd.ms-word.document.macroEnabled.12", "application/vnd.ms-word.document.macroEnabled.12"));
    ContType.insert(std::make_pair("vnd.ms-word.template.macroEnabled.12", "application/vnd.ms-word.template.macroEnabled.12"));
    ContType.insert(std::make_pair("vnd.ms-works", "application/vnd.ms-works"));
    ContType.insert(std::make_pair("vnd.ms-wpl", "application/vnd.ms-wpl"));
    ContType.insert(std::make_pair("vnd.ms-xpsdocument", "application/vnd.ms-xpsdocument"));
    ContType.insert(std::make_pair("vnd.msa-disk-image", "application/vnd.msa-disk-image"));
    ContType.insert(std::make_pair("vnd.mseq", "application/vnd.mseq"));
    ContType.insert(std::make_pair("vnd.msign", "application/vnd.msign"));
    ContType.insert(std::make_pair("vnd.multiad.creator", "application/vnd.multiad.creator"));
    ContType.insert(std::make_pair("vnd.multiad.creator.cif", "application/vnd.multiad.creator.cif"));
    ContType.insert(std::make_pair("vnd.musician", "application/vnd.musician"));
    ContType.insert(std::make_pair("vnd.music-niff", "application/vnd.music-niff"));
    ContType.insert(std::make_pair("vnd.muvee.style", "application/vnd.muvee.style"));
    ContType.insert(std::make_pair("vnd.mynfc", "application/vnd.mynfc"));
    ContType.insert(std::make_pair("vnd.nacamar.ybrid+json", "application/vnd.nacamar.ybrid+json"));
    ContType.insert(std::make_pair("vnd.ncd.control", "application/vnd.ncd.control"));
    ContType.insert(std::make_pair("vnd.ncd.reference", "application/vnd.ncd.reference"));
    ContType.insert(std::make_pair("vnd.nearst.inv+json", "application/vnd.nearst.inv+json"));
    ContType.insert(std::make_pair("vnd.nebumind.line", "application/vnd.nebumind.line"));
    ContType.insert(std::make_pair("vnd.nervana", "application/vnd.nervana"));
    ContType.insert(std::make_pair("vnd.netfpx", "application/vnd.netfpx"));
    ContType.insert(std::make_pair("vnd.neurolanguage.nlu", "application/vnd.neurolanguage.nlu"));
    ContType.insert(std::make_pair("vnd.nimn", "application/vnd.nimn"));
    ContType.insert(std::make_pair("vnd.nintendo.snes.rom", "application/vnd.nintendo.snes.rom"));
    ContType.insert(std::make_pair("vnd.nintendo.nitro.rom", "application/vnd.nintendo.nitro.rom"));
    ContType.insert(std::make_pair("vnd.nitf", "application/vnd.nitf"));
    ContType.insert(std::make_pair("vnd.noblenet-directory", "application/vnd.noblenet-directory"));
    ContType.insert(std::make_pair("vnd.noblenet-sealer", "application/vnd.noblenet-sealer"));
    ContType.insert(std::make_pair("vnd.noblenet-web", "application/vnd.noblenet-web"));
    ContType.insert(std::make_pair("vnd.nokia.catalogs", "application/vnd.nokia.catalogs"));
    ContType.insert(std::make_pair("vnd.nokia.conml+wbxml", "application/vnd.nokia.conml+wbxml"));
    ContType.insert(std::make_pair("vnd.nokia.conml+xml", "application/vnd.nokia.conml+xml"));
    ContType.insert(std::make_pair("vnd.nokia.iptv.config+xml", "application/vnd.nokia.iptv.config+xml"));
    ContType.insert(std::make_pair("vnd.nokia.iSDS-radio-presets", "application/vnd.nokia.iSDS-radio-presets"));
    ContType.insert(std::make_pair("vnd.nokia.landmark+wbxml", "application/vnd.nokia.landmark+wbxml"));
    ContType.insert(std::make_pair("vnd.nokia.landmark+xml", "application/vnd.nokia.landmark+xml"));
    ContType.insert(std::make_pair("vnd.nokia.landmarkcollection+xml", "application/vnd.nokia.landmarkcollection+xml"));
    ContType.insert(std::make_pair("vnd.nokia.ncd", "application/vnd.nokia.ncd"));
    ContType.insert(std::make_pair("vnd.nokia.n-gage.ac+xml", "application/vnd.nokia.n-gage.ac+xml"));
    ContType.insert(std::make_pair("vnd.nokia.n-gage.data", "application/vnd.nokia.n-gage.data"));
    ContType.insert(std::make_pair("vnd.nokia.n-gage.symbian.install (OBSOLETE", " no replacement given)"));
    ContType.insert(std::make_pair("vnd.nokia.pcd+wbxml", "application/vnd.nokia.pcd+wbxml"));
    ContType.insert(std::make_pair("vnd.nokia.pcd+xml", "application/vnd.nokia.pcd+xml"));
    ContType.insert(std::make_pair("vnd.nokia.radio-preset", "application/vnd.nokia.radio-preset"));
    ContType.insert(std::make_pair("vnd.nokia.radio-presets", "application/vnd.nokia.radio-presets"));
    ContType.insert(std::make_pair("vnd.novadigm.EDM", "application/vnd.novadigm.EDM"));
    ContType.insert(std::make_pair("vnd.novadigm.EDX", "application/vnd.novadigm.EDX"));
    ContType.insert(std::make_pair("vnd.novadigm.EXT", "application/vnd.novadigm.EXT"));
    ContType.insert(std::make_pair("vnd.ntt-local.content-share", "application/vnd.ntt-local.content-share"));
    ContType.insert(std::make_pair("vnd.ntt-local.file-transfer", "application/vnd.ntt-local.file-transfer"));
    ContType.insert(std::make_pair("vnd.ntt-local.ogw_remote-access", "application/vnd.ntt-local.ogw_remote-access"));
    ContType.insert(std::make_pair("vnd.ntt-local.sip-ta_remote", "application/vnd.ntt-local.sip-ta_remote"));
    ContType.insert(std::make_pair("vnd.ntt-local.sip-ta_tcp_stream", "application/vnd.ntt-local.sip-ta_tcp_stream"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.chart", "application/vnd.oasis.opendocument.chart"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.chart-template", "application/vnd.oasis.opendocument.chart-template"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.database", "application/vnd.oasis.opendocument.database"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.formula", "application/vnd.oasis.opendocument.formula"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.formula-template", "application/vnd.oasis.opendocument.formula-template"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.graphics", "application/vnd.oasis.opendocument.graphics"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.graphics-template", "application/vnd.oasis.opendocument.graphics-template"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.image", "application/vnd.oasis.opendocument.image"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.image-template", "application/vnd.oasis.opendocument.image-template"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.presentation", "application/vnd.oasis.opendocument.presentation"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.presentation-template", "application/vnd.oasis.opendocument.presentation-template"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.spreadsheet", "application/vnd.oasis.opendocument.spreadsheet"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.spreadsheet-template", "application/vnd.oasis.opendocument.spreadsheet-template"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.text", "application/vnd.oasis.opendocument.text"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.text-master", "application/vnd.oasis.opendocument.text-master"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.text-template", "application/vnd.oasis.opendocument.text-template"));
    ContType.insert(std::make_pair("vnd.oasis.opendocument.text-web", "application/vnd.oasis.opendocument.text-web"));
    ContType.insert(std::make_pair("vnd.obn", "application/vnd.obn"));
    ContType.insert(std::make_pair("vnd.ocf+cbor", "application/vnd.ocf+cbor"));
    ContType.insert(std::make_pair("vnd.oci.image.manifest.v1+json", "application/vnd.oci.image.manifest.v1+json"));
    ContType.insert(std::make_pair("vnd.oftn.l10n+json", "application/vnd.oftn.l10n+json"));
    ContType.insert(std::make_pair("vnd.oipf.contentaccessdownload+xml", "application/vnd.oipf.contentaccessdownload+xml"));
    ContType.insert(std::make_pair("vnd.oipf.contentaccessstreaming+xml", "application/vnd.oipf.contentaccessstreaming+xml"));
    ContType.insert(std::make_pair("vnd.oipf.cspg-hexbinary", "application/vnd.oipf.cspg-hexbinary"));
    ContType.insert(std::make_pair("vnd.oipf.dae.svg+xml", "application/vnd.oipf.dae.svg+xml"));
    ContType.insert(std::make_pair("vnd.oipf.dae.xhtml+xml", "application/vnd.oipf.dae.xhtml+xml"));
    ContType.insert(std::make_pair("vnd.oipf.mippvcontrolmessage+xml", "application/vnd.oipf.mippvcontrolmessage+xml"));
    ContType.insert(std::make_pair("vnd.oipf.pae.gem", "application/vnd.oipf.pae.gem"));
    ContType.insert(std::make_pair("vnd.oipf.spdiscovery+xml", "application/vnd.oipf.spdiscovery+xml"));
    ContType.insert(std::make_pair("vnd.oipf.spdlist+xml", "application/vnd.oipf.spdlist+xml"));
    ContType.insert(std::make_pair("vnd.oipf.ueprofile+xml", "application/vnd.oipf.ueprofile+xml"));
    ContType.insert(std::make_pair("vnd.oipf.userprofile+xml", "application/vnd.oipf.userprofile+xml"));
    ContType.insert(std::make_pair("vnd.olpc-sugar", "application/vnd.olpc-sugar"));
    ContType.insert(std::make_pair("vnd.oma.bcast.associated-procedure-parameter+xml", "application/vnd.oma.bcast.associated-procedure-parameter+xml"));
    ContType.insert(std::make_pair("vnd.oma.bcast.drm-trigger+xml", "application/vnd.oma.bcast.drm-trigger+xml"));
    ContType.insert(std::make_pair("vnd.oma.bcast.imd+xml", "application/vnd.oma.bcast.imd+xml"));
    ContType.insert(std::make_pair("vnd.oma.bcast.ltkm", "application/vnd.oma.bcast.ltkm"));
    ContType.insert(std::make_pair("vnd.oma.bcast.notification+xml", "application/vnd.oma.bcast.notification+xml"));
    ContType.insert(std::make_pair("vnd.oma.bcast.provisioningtrigger", "application/vnd.oma.bcast.provisioningtrigger"));
    ContType.insert(std::make_pair("vnd.oma.bcast.sgboot", "application/vnd.oma.bcast.sgboot"));
    ContType.insert(std::make_pair("vnd.oma.bcast.sgdd+xml", "application/vnd.oma.bcast.sgdd+xml"));
    ContType.insert(std::make_pair("vnd.oma.bcast.sgdu", "application/vnd.oma.bcast.sgdu"));
    ContType.insert(std::make_pair("vnd.oma.bcast.simple-symbol-container", "application/vnd.oma.bcast.simple-symbol-container"));
    ContType.insert(std::make_pair("vnd.oma.bcast.smartcard-trigger+xml", "application/vnd.oma.bcast.smartcard-trigger+xml"));
    ContType.insert(std::make_pair("vnd.oma.bcast.sprov+xml", "application/vnd.oma.bcast.sprov+xml"));
    ContType.insert(std::make_pair("vnd.oma.bcast.stkm", "application/vnd.oma.bcast.stkm"));
    ContType.insert(std::make_pair("vnd.oma.cab-address-book+xml", "application/vnd.oma.cab-address-book+xml"));
    ContType.insert(std::make_pair("vnd.oma.cab-feature-handler+xml", "application/vnd.oma.cab-feature-handler+xml"));
    ContType.insert(std::make_pair("vnd.oma.cab-pcc+xml", "application/vnd.oma.cab-pcc+xml"));
    ContType.insert(std::make_pair("vnd.oma.cab-subs-invite+xml", "application/vnd.oma.cab-subs-invite+xml"));
    ContType.insert(std::make_pair("vnd.oma.cab-user-prefs+xml", "application/vnd.oma.cab-user-prefs+xml"));
    ContType.insert(std::make_pair("vnd.oma.dcd", "application/vnd.oma.dcd"));
    ContType.insert(std::make_pair("vnd.oma.dcdc", "application/vnd.oma.dcdc"));
    ContType.insert(std::make_pair("vnd.oma.dd2+xml", "application/vnd.oma.dd2+xml"));
    ContType.insert(std::make_pair("vnd.oma.drm.risd+xml", "application/vnd.oma.drm.risd+xml"));
    ContType.insert(std::make_pair("vnd.oma.group-usage-list+xml", "application/vnd.oma.group-usage-list+xml"));
    ContType.insert(std::make_pair("vnd.oma.lwm2m+cbor", "application/vnd.oma.lwm2m+cbor"));
    ContType.insert(std::make_pair("vnd.oma.lwm2m+json", "application/vnd.oma.lwm2m+json"));
    ContType.insert(std::make_pair("vnd.oma.lwm2m+tlv", "application/vnd.oma.lwm2m+tlv"));
    ContType.insert(std::make_pair("vnd.oma.pal+xml", "application/vnd.oma.pal+xml"));
    ContType.insert(std::make_pair("vnd.oma.poc.detailed-progress-report+xml", "application/vnd.oma.poc.detailed-progress-report+xml"));
    ContType.insert(std::make_pair("vnd.oma.poc.final-report+xml", "application/vnd.oma.poc.final-report+xml"));
    ContType.insert(std::make_pair("vnd.oma.poc.groups+xml", "application/vnd.oma.poc.groups+xml"));
    ContType.insert(std::make_pair("vnd.oma.poc.invocation-descriptor+xml", "application/vnd.oma.poc.invocation-descriptor+xml"));
    ContType.insert(std::make_pair("vnd.oma.poc.optimized-progress-report+xml", "application/vnd.oma.poc.optimized-progress-report+xml"));
    ContType.insert(std::make_pair("vnd.oma.push", "application/vnd.oma.push"));
    ContType.insert(std::make_pair("vnd.oma.scidm.messages+xml", "application/vnd.oma.scidm.messages+xml"));
    ContType.insert(std::make_pair("vnd.oma.xcap-directory+xml", "application/vnd.oma.xcap-directory+xml"));
    ContType.insert(std::make_pair("vnd.omads-email+xml", "application/vnd.omads-email+xml"));
    ContType.insert(std::make_pair("vnd.omads-file+xml", "application/vnd.omads-file+xml"));
    ContType.insert(std::make_pair("vnd.omads-folder+xml", "application/vnd.omads-folder+xml"));
    ContType.insert(std::make_pair("vnd.omaloc-supl-init", "application/vnd.omaloc-supl-init"));
    ContType.insert(std::make_pair("vnd.oma-scws-config", "application/vnd.oma-scws-config"));
    ContType.insert(std::make_pair("vnd.oma-scws-http-request", "application/vnd.oma-scws-http-request"));
    ContType.insert(std::make_pair("vnd.oma-scws-http-response", "application/vnd.oma-scws-http-response"));
    ContType.insert(std::make_pair("vnd.onepager", "application/vnd.onepager"));
    ContType.insert(std::make_pair("vnd.onepagertamp", "application/vnd.onepagertamp"));
    ContType.insert(std::make_pair("vnd.onepagertamx", "application/vnd.onepagertamx"));
    ContType.insert(std::make_pair("vnd.onepagertat", "application/vnd.onepagertat"));
    ContType.insert(std::make_pair("vnd.onepagertatp", "application/vnd.onepagertatp"));
    ContType.insert(std::make_pair("vnd.onepagertatx", "application/vnd.onepagertatx"));
    ContType.insert(std::make_pair("vnd.openblox.game-binary", "application/vnd.openblox.game-binary"));
    ContType.insert(std::make_pair("vnd.openblox.game+xml", "application/vnd.openblox.game+xml"));
    ContType.insert(std::make_pair("vnd.openeye.oeb", "application/vnd.openeye.oeb"));
    ContType.insert(std::make_pair("vnd.openstreetmap.data+xml", "application/vnd.openstreetmap.data+xml"));
    ContType.insert(std::make_pair("vnd.opentimestamps.ots", "application/vnd.opentimestamps.ots"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.custom-properties+xml", "application/vnd.openxmlformats-officedocument.custom-properties+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.customXmlProperties+xml", "application/vnd.openxmlformats-officedocument.customXmlProperties+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.drawing+xml", "application/vnd.openxmlformats-officedocument.drawing+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.drawingml.chart+xml", "application/vnd.openxmlformats-officedocument.drawingml.chart+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.drawingml.chartshapes+xml", "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.drawingml.diagramColors+xml", "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.drawingml.diagramData+xml", "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml", "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml", "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.extended-properties+xml", "application/vnd.openxmlformats-officedocument.extended-properties+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.commentAuthors+xml", "application/vnd.openxmlformats-officedocument.presentationml.commentAuthors+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.comments+xml", "application/vnd.openxmlformats-officedocument.presentationml.comments+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.handoutMaster+xml", "application/vnd.openxmlformats-officedocument.presentationml.handoutMaster+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.notesMaster+xml", "application/vnd.openxmlformats-officedocument.presentationml.notesMaster+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.notesSlide+xml", "application/vnd.openxmlformats-officedocument.presentationml.notesSlide+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.presentation", "application/vnd.openxmlformats-officedocument.presentationml.presentation"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.presentation.main+xml", "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.presProps+xml", "application/vnd.openxmlformats-officedocument.presentationml.presProps+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.slide", "application/vnd.openxmlformats-officedocument.presentationml.slide"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.slide+xml", "application/vnd.openxmlformats-officedocument.presentationml.slide+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.slideLayout+xml", "application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.slideMaster+xml", "application/vnd.openxmlformats-officedocument.presentationml.slideMaster+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.slideshow", "application/vnd.openxmlformats-officedocument.presentationml.slideshow"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml", "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.slideUpdateInfo+xml", "application/vnd.openxmlformats-officedocument.presentationml.slideUpdateInfo+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.tableStyles+xml", "application/vnd.openxmlformats-officedocument.presentationml.tableStyles+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.tags+xml", "application/vnd.openxmlformats-officedocument.presentationml.tags+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.template", "application/vnd.openxmlformats-officedocument.presentationml.template"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.template.main+xml", "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.presentationml.viewProps+xml", "application/vnd.openxmlformats-officedocument.presentationml.viewProps+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.comments+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.connections+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.styles+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.table+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.template", "application/vnd.openxmlformats-officedocument.spreadsheetml.template"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml", "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.theme+xml", "application/vnd.openxmlformats-officedocument.theme+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.themeOverride+xml", "application/vnd.openxmlformats-officedocument.themeOverride+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.vmlDrawing", "application/vnd.openxmlformats-officedocument.vmlDrawing"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.comments+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.document", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.footer+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.settings+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.styles+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.template", "application/vnd.openxmlformats-officedocument.wordprocessingml.template"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-officedocument.wordprocessingml.webSettings+xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.webSettings+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-package.core-properties+xml", "application/vnd.openxmlformats-package.core-properties+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-package.digital-signature-xmlsignature+xml", "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml"));
    ContType.insert(std::make_pair("vnd.openxmlformats-package.relationships+xml", "application/vnd.openxmlformats-package.relationships+xml"));
    ContType.insert(std::make_pair("vnd.oracle.resource+json", "application/vnd.oracle.resource+json"));
    ContType.insert(std::make_pair("vnd.orange.indata", "application/vnd.orange.indata"));
    ContType.insert(std::make_pair("vnd.osa.netdeploy", "application/vnd.osa.netdeploy"));
    ContType.insert(std::make_pair("vnd.osgeo.mapguide.package", "application/vnd.osgeo.mapguide.package"));
    ContType.insert(std::make_pair("vnd.osgi.bundle", "application/vnd.osgi.bundle"));
    ContType.insert(std::make_pair("vnd.osgi.dp", "application/vnd.osgi.dp"));
    ContType.insert(std::make_pair("vnd.osgi.subsystem", "application/vnd.osgi.subsystem"));
    ContType.insert(std::make_pair("vnd.otps.ct-kip+xml", "application/vnd.otps.ct-kip+xml"));
    ContType.insert(std::make_pair("vnd.oxli.countgraph", "application/vnd.oxli.countgraph"));
    ContType.insert(std::make_pair("vnd.pagerduty+json", "application/vnd.pagerduty+json"));
    ContType.insert(std::make_pair("vnd.palm", "application/vnd.palm"));
    ContType.insert(std::make_pair("vnd.panoply", "application/vnd.panoply"));
    ContType.insert(std::make_pair("vnd.paos.xml", "application/vnd.paos.xml"));
    ContType.insert(std::make_pair("vnd.patentdive", "application/vnd.patentdive"));
    ContType.insert(std::make_pair("vnd.patientecommsdoc", "application/vnd.patientecommsdoc"));
    ContType.insert(std::make_pair("vnd.pawaafile", "application/vnd.pawaafile"));
    ContType.insert(std::make_pair("vnd.pcos", "application/vnd.pcos"));
    ContType.insert(std::make_pair("vnd.pg.format", "application/vnd.pg.format"));
    ContType.insert(std::make_pair("vnd.pg.osasli", "application/vnd.pg.osasli"));
    ContType.insert(std::make_pair("vnd.piaccess.application-licence", "application/vnd.piaccess.application-licence"));
    ContType.insert(std::make_pair("vnd.picsel", "application/vnd.picsel"));
    ContType.insert(std::make_pair("vnd.pmi.widget", "application/vnd.pmi.widget"));
    ContType.insert(std::make_pair("vnd.poc.group-advertisement+xml", "application/vnd.poc.group-advertisement+xml"));
    ContType.insert(std::make_pair("vnd.pocketlearn", "application/vnd.pocketlearn"));
    ContType.insert(std::make_pair("vnd.powerbuilder6", "application/vnd.powerbuilder6"));
    ContType.insert(std::make_pair("vnd.powerbuilder6-s", "application/vnd.powerbuilder6-s"));
    ContType.insert(std::make_pair("vnd.powerbuilder7", "application/vnd.powerbuilder7"));
    ContType.insert(std::make_pair("vnd.powerbuilder75", "application/vnd.powerbuilder75"));
    ContType.insert(std::make_pair("vnd.powerbuilder75-s", "application/vnd.powerbuilder75-s"));
    ContType.insert(std::make_pair("vnd.powerbuilder7-s", "application/vnd.powerbuilder7-s"));
    ContType.insert(std::make_pair("vnd.preminet", "application/vnd.preminet"));
    ContType.insert(std::make_pair("vnd.previewsystems.box", "application/vnd.previewsystems.box"));
    ContType.insert(std::make_pair("vnd.proteus.magazine", "application/vnd.proteus.magazine"));
    ContType.insert(std::make_pair("vnd.psfs", "application/vnd.psfs"));
    ContType.insert(std::make_pair("vnd.publishare-delta-tree", "application/vnd.publishare-delta-tree"));
    ContType.insert(std::make_pair("vnd.pvi.ptid1", "application/vnd.pvi.ptid1"));
    ContType.insert(std::make_pair("vnd.pwg-multiplexed", "application/vnd.pwg-multiplexed"));
    ContType.insert(std::make_pair("vnd.pwg-xhtml-print+xml", "application/vnd.pwg-xhtml-print+xml"));
    ContType.insert(std::make_pair("vnd.qualcomm.brew-app-res", "application/vnd.qualcomm.brew-app-res"));
    ContType.insert(std::make_pair("vnd.quarantainenet", "application/vnd.quarantainenet"));
    ContType.insert(std::make_pair("vnd.Quark.QuarkXPress", "application/vnd.Quark.QuarkXPress"));
    ContType.insert(std::make_pair("vnd.quobject-quoxdocument", "application/vnd.quobject-quoxdocument"));
    ContType.insert(std::make_pair("vnd.radisys.moml+xml", "application/vnd.radisys.moml+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-audit-conf+xml", "application/vnd.radisys.msml-audit-conf+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-audit-conn+xml", "application/vnd.radisys.msml-audit-conn+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-audit-dialog+xml", "application/vnd.radisys.msml-audit-dialog+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-audit-stream+xml", "application/vnd.radisys.msml-audit-stream+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-audit+xml", "application/vnd.radisys.msml-audit+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-conf+xml", "application/vnd.radisys.msml-conf+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-dialog-base+xml", "application/vnd.radisys.msml-dialog-base+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-dialog-fax-detect+xml", "application/vnd.radisys.msml-dialog-fax-detect+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-dialog-fax-sendrecv+xml", "application/vnd.radisys.msml-dialog-fax-sendrecv+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-dialog-group+xml", "application/vnd.radisys.msml-dialog-group+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-dialog-speech+xml", "application/vnd.radisys.msml-dialog-speech+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-dialog-transform+xml", "application/vnd.radisys.msml-dialog-transform+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml-dialog+xml", "application/vnd.radisys.msml-dialog+xml"));
    ContType.insert(std::make_pair("vnd.radisys.msml+xml", "application/vnd.radisys.msml+xml"));
    ContType.insert(std::make_pair("vnd.rainstor.data", "application/vnd.rainstor.data"));
    ContType.insert(std::make_pair("vnd.rapid", "application/vnd.rapid"));
    ContType.insert(std::make_pair("vnd.rar", "application/vnd.rar"));
    ContType.insert(std::make_pair("vnd.realvnc.bed", "application/vnd.realvnc.bed"));
    ContType.insert(std::make_pair("vnd.recordare.musicxml", "application/vnd.recordare.musicxml"));
    ContType.insert(std::make_pair("vnd.recordare.musicxml+xml", "application/vnd.recordare.musicxml+xml"));
    ContType.insert(std::make_pair("vnd.RenLearn.rlprint", "application/vnd.RenLearn.rlprint"));
    ContType.insert(std::make_pair("vnd.resilient.logic", "application/vnd.resilient.logic"));
    ContType.insert(std::make_pair("vnd.restful+json", "application/vnd.restful+json"));
    ContType.insert(std::make_pair("vnd.rig.cryptonote", "application/vnd.rig.cryptonote"));
    ContType.insert(std::make_pair("vnd.route66.link66+xml", "application/vnd.route66.link66+xml"));
    ContType.insert(std::make_pair("vnd.rs-274x", "application/vnd.rs-274x"));
    ContType.insert(std::make_pair("vnd.ruckus.download", "application/vnd.ruckus.download"));
    ContType.insert(std::make_pair("vnd.s3sms", "application/vnd.s3sms"));
    ContType.insert(std::make_pair("vnd.sailingtracker.track", "application/vnd.sailingtracker.track"));
    ContType.insert(std::make_pair("vnd.sar", "application/vnd.sar"));
    ContType.insert(std::make_pair("vnd.sbm.cid", "application/vnd.sbm.cid"));
    ContType.insert(std::make_pair("vnd.sbm.mid2", "application/vnd.sbm.mid2"));
    ContType.insert(std::make_pair("vnd.scribus", "application/vnd.scribus"));
    ContType.insert(std::make_pair("vnd.sealed.3df", "application/vnd.sealed.3df"));
    ContType.insert(std::make_pair("vnd.sealed.csf", "application/vnd.sealed.csf"));
    ContType.insert(std::make_pair("vnd.sealed.doc", "application/vnd.sealed.doc"));
    ContType.insert(std::make_pair("vnd.sealed.eml", "application/vnd.sealed.eml"));
    ContType.insert(std::make_pair("vnd.sealed.mht", "application/vnd.sealed.mht"));
    ContType.insert(std::make_pair("vnd.sealed.net", "application/vnd.sealed.net"));
    ContType.insert(std::make_pair("vnd.sealed.ppt", "application/vnd.sealed.ppt"));
    ContType.insert(std::make_pair("vnd.sealed.tiff", "application/vnd.sealed.tiff"));
    ContType.insert(std::make_pair("vnd.sealed.xls", "application/vnd.sealed.xls"));
    ContType.insert(std::make_pair("vnd.sealedmedia.softseal.html", "application/vnd.sealedmedia.softseal.html"));
    ContType.insert(std::make_pair("vnd.sealedmedia.softseal.pdf", "application/vnd.sealedmedia.softseal.pdf"));
    ContType.insert(std::make_pair("vnd.seemail", "application/vnd.seemail"));
    ContType.insert(std::make_pair("vnd.seis+json", "application/vnd.seis+json"));
    ContType.insert(std::make_pair("vnd.sema", "application/vnd.sema"));
    ContType.insert(std::make_pair("vnd.semd", "application/vnd.semd"));
    ContType.insert(std::make_pair("vnd.semf", "application/vnd.semf"));
    ContType.insert(std::make_pair("vnd.shade-save-file", "application/vnd.shade-save-file"));
    ContType.insert(std::make_pair("vnd.shana.informed.formdata", "application/vnd.shana.informed.formdata"));
    ContType.insert(std::make_pair("vnd.shana.informed.formtemplate", "application/vnd.shana.informed.formtemplate"));
    ContType.insert(std::make_pair("vnd.shana.informed.interchange", "application/vnd.shana.informed.interchange"));
    ContType.insert(std::make_pair("vnd.shana.informed.package", "application/vnd.shana.informed.package"));
    ContType.insert(std::make_pair("vnd.shootproof+json", "application/vnd.shootproof+json"));
    ContType.insert(std::make_pair("vnd.shopkick+json", "application/vnd.shopkick+json"));
    ContType.insert(std::make_pair("vnd.shp", "application/vnd.shp"));
    ContType.insert(std::make_pair("vnd.shx", "application/vnd.shx"));
    ContType.insert(std::make_pair("vnd.sigrok.session", "application/vnd.sigrok.session"));
    ContType.insert(std::make_pair("vnd.SimTech-MindMapper", "application/vnd.SimTech-MindMapper"));
    ContType.insert(std::make_pair("vnd.siren+json", "application/vnd.siren+json"));
    ContType.insert(std::make_pair("vnd.smaf", "application/vnd.smaf"));
    ContType.insert(std::make_pair("vnd.smart.notebook", "application/vnd.smart.notebook"));
    ContType.insert(std::make_pair("vnd.smart.teacher", "application/vnd.smart.teacher"));
    ContType.insert(std::make_pair("vnd.snesdev-page-table", "application/vnd.snesdev-page-table"));
    ContType.insert(std::make_pair("vnd.software602.filler.form+xml", "application/vnd.software602.filler.form+xml"));
    ContType.insert(std::make_pair("vnd.software602.filler.form-xml-zip", "application/vnd.software602.filler.form-xml-zip"));
    ContType.insert(std::make_pair("vnd.solent.sdkm+xml", "application/vnd.solent.sdkm+xml"));
    ContType.insert(std::make_pair("vnd.spotfire.dxp", "application/vnd.spotfire.dxp"));
    ContType.insert(std::make_pair("vnd.spotfire.sfs", "application/vnd.spotfire.sfs"));
    ContType.insert(std::make_pair("vnd.sqlite3", "application/vnd.sqlite3"));
    ContType.insert(std::make_pair("vnd.sss-cod", "application/vnd.sss-cod"));
    ContType.insert(std::make_pair("vnd.sss-dtf", "application/vnd.sss-dtf"));
    ContType.insert(std::make_pair("vnd.sss-ntf", "application/vnd.sss-ntf"));
    ContType.insert(std::make_pair("vnd.stepmania.package", "application/vnd.stepmania.package"));
    ContType.insert(std::make_pair("vnd.stepmania.stepchart", "application/vnd.stepmania.stepchart"));
    ContType.insert(std::make_pair("vnd.street-stream", "application/vnd.street-stream"));
    ContType.insert(std::make_pair("vnd.sun.wadl+xml", "application/vnd.sun.wadl+xml"));
    ContType.insert(std::make_pair("vnd.sus-calendar", "application/vnd.sus-calendar"));
    ContType.insert(std::make_pair("vnd.svd", "application/vnd.svd"));
    ContType.insert(std::make_pair("vnd.swiftview-ics", "application/vnd.swiftview-ics"));
    ContType.insert(std::make_pair("vnd.sycle+xml", "application/vnd.sycle+xml"));
    ContType.insert(std::make_pair("vnd.syft+json", "application/vnd.syft+json"));
    ContType.insert(std::make_pair("vnd.syncml.dm.notification", "application/vnd.syncml.dm.notification"));
    ContType.insert(std::make_pair("vnd.syncml.dmddf+xml", "application/vnd.syncml.dmddf+xml"));
    ContType.insert(std::make_pair("vnd.syncml.dmtnds+wbxml", "application/vnd.syncml.dmtnds+wbxml"));
    ContType.insert(std::make_pair("vnd.syncml.dmtnds+xml", "application/vnd.syncml.dmtnds+xml"));
    ContType.insert(std::make_pair("vnd.syncml.dmddf+wbxml", "application/vnd.syncml.dmddf+wbxml"));
    ContType.insert(std::make_pair("vnd.syncml.dm+wbxml", "application/vnd.syncml.dm+wbxml"));
    ContType.insert(std::make_pair("vnd.syncml.dm+xml", "application/vnd.syncml.dm+xml"));
    ContType.insert(std::make_pair("vnd.syncml.ds.notification", "application/vnd.syncml.ds.notification"));
    ContType.insert(std::make_pair("vnd.syncml+xml", "application/vnd.syncml+xml"));
    ContType.insert(std::make_pair("vnd.tableschema+json", "application/vnd.tableschema+json"));
    ContType.insert(std::make_pair("vnd.tao.intent-module-archive", "application/vnd.tao.intent-module-archive"));
    ContType.insert(std::make_pair("vnd.tcpdump.pcap", "application/vnd.tcpdump.pcap"));
    ContType.insert(std::make_pair("vnd.think-cell.ppttc+json", "application/vnd.think-cell.ppttc+json"));
    ContType.insert(std::make_pair("vnd.tml", "application/vnd.tml"));
    ContType.insert(std::make_pair("vnd.tmd.mediaflex.api+xml", "application/vnd.tmd.mediaflex.api+xml"));
    ContType.insert(std::make_pair("vnd.tmobile-livetv", "application/vnd.tmobile-livetv"));
    ContType.insert(std::make_pair("vnd.tri.onesource", "application/vnd.tri.onesource"));
    ContType.insert(std::make_pair("vnd.trid.tpt", "application/vnd.trid.tpt"));
    ContType.insert(std::make_pair("vnd.triscape.mxs", "application/vnd.triscape.mxs"));
    ContType.insert(std::make_pair("vnd.trueapp", "application/vnd.trueapp"));
    ContType.insert(std::make_pair("vnd.truedoc", "application/vnd.truedoc"));
    ContType.insert(std::make_pair("vnd.ubisoft.webplayer", "application/vnd.ubisoft.webplayer"));
    ContType.insert(std::make_pair("vnd.ufdl", "application/vnd.ufdl"));
    ContType.insert(std::make_pair("vnd.uiq.theme", "application/vnd.uiq.theme"));
    ContType.insert(std::make_pair("vnd.umajin", "application/vnd.umajin"));
    ContType.insert(std::make_pair("vnd.unity", "application/vnd.unity"));
    ContType.insert(std::make_pair("vnd.uoml+xml", "application/vnd.uoml+xml"));
    ContType.insert(std::make_pair("vnd.uplanet.alert", "application/vnd.uplanet.alert"));
    ContType.insert(std::make_pair("vnd.uplanet.alert-wbxml", "application/vnd.uplanet.alert-wbxml"));
    ContType.insert(std::make_pair("vnd.uplanet.bearer-choice", "application/vnd.uplanet.bearer-choice"));
    ContType.insert(std::make_pair("vnd.uplanet.bearer-choice-wbxml", "application/vnd.uplanet.bearer-choice-wbxml"));
    ContType.insert(std::make_pair("vnd.uplanet.cacheop", "application/vnd.uplanet.cacheop"));
    ContType.insert(std::make_pair("vnd.uplanet.cacheop-wbxml", "application/vnd.uplanet.cacheop-wbxml"));
    ContType.insert(std::make_pair("vnd.uplanet.channel", "application/vnd.uplanet.channel"));
    ContType.insert(std::make_pair("vnd.uplanet.channel-wbxml", "application/vnd.uplanet.channel-wbxml"));
    ContType.insert(std::make_pair("vnd.uplanet.list", "application/vnd.uplanet.list"));
    ContType.insert(std::make_pair("vnd.uplanet.listcmd", "application/vnd.uplanet.listcmd"));
    ContType.insert(std::make_pair("vnd.uplanet.listcmd-wbxml", "application/vnd.uplanet.listcmd-wbxml"));
    ContType.insert(std::make_pair("vnd.uplanet.list-wbxml", "application/vnd.uplanet.list-wbxml"));
    ContType.insert(std::make_pair("vnd.uri-map", "application/vnd.uri-map"));
    ContType.insert(std::make_pair("vnd.uplanet.signal", "application/vnd.uplanet.signal"));
    ContType.insert(std::make_pair("vnd.valve.source.material", "application/vnd.valve.source.material"));
    ContType.insert(std::make_pair("vnd.vcx", "application/vnd.vcx"));
    ContType.insert(std::make_pair("vnd.vd-study", "application/vnd.vd-study"));
    ContType.insert(std::make_pair("vnd.vectorworks", "application/vnd.vectorworks"));
    ContType.insert(std::make_pair("vnd.vel+json", "application/vnd.vel+json"));
    ContType.insert(std::make_pair("vnd.verimatrix.vcas", "application/vnd.verimatrix.vcas"));
    ContType.insert(std::make_pair("vnd.veritone.aion+json", "application/vnd.veritone.aion+json"));
    ContType.insert(std::make_pair("vnd.veryant.thin", "application/vnd.veryant.thin"));
    ContType.insert(std::make_pair("vnd.ves.encrypted", "application/vnd.ves.encrypted"));
    ContType.insert(std::make_pair("vnd.vidsoft.vidconference", "application/vnd.vidsoft.vidconference"));
    ContType.insert(std::make_pair("vnd.visio", "application/vnd.visio"));
    ContType.insert(std::make_pair("vnd.visionary", "application/vnd.visionary"));
    ContType.insert(std::make_pair("vnd.vividence.scriptfile", "application/vnd.vividence.scriptfile"));
    ContType.insert(std::make_pair("vnd.vsf", "application/vnd.vsf"));
    ContType.insert(std::make_pair("vnd.wap.sic", "application/vnd.wap.sic"));
    ContType.insert(std::make_pair("vnd.wap.slc", "application/vnd.wap.slc"));
    ContType.insert(std::make_pair("vnd.wap.wbxml", "application/vnd.wap.wbxml"));
    ContType.insert(std::make_pair("vnd.wap.wmlc", "application/vnd.wap.wmlc"));
    ContType.insert(std::make_pair("vnd.wap.wmlscriptc", "application/vnd.wap.wmlscriptc"));
    ContType.insert(std::make_pair("vnd.webturbo", "application/vnd.webturbo"));
    ContType.insert(std::make_pair("vnd.wfa.dpp", "application/vnd.wfa.dpp"));
    ContType.insert(std::make_pair("vnd.wfa.p2p", "application/vnd.wfa.p2p"));
    ContType.insert(std::make_pair("vnd.wfa.wsc", "application/vnd.wfa.wsc"));
    ContType.insert(std::make_pair("vnd.windows.devicepairing", "application/vnd.windows.devicepairing"));
    ContType.insert(std::make_pair("vnd.wmc", "application/vnd.wmc"));
    ContType.insert(std::make_pair("vnd.wmf.bootstrap", "application/vnd.wmf.bootstrap"));
    ContType.insert(std::make_pair("vnd.wolfram.mathematica", "application/vnd.wolfram.mathematica"));
    ContType.insert(std::make_pair("vnd.wolfram.mathematica.package", "application/vnd.wolfram.mathematica.package"));
    ContType.insert(std::make_pair("vnd.wolfram.player", "application/vnd.wolfram.player"));
    ContType.insert(std::make_pair("vnd.wordperfect", "application/vnd.wordperfect"));
    ContType.insert(std::make_pair("vnd.wqd", "application/vnd.wqd"));
    ContType.insert(std::make_pair("vnd.wrq-hp3000-labelled", "application/vnd.wrq-hp3000-labelled"));
    ContType.insert(std::make_pair("vnd.wt.stf", "application/vnd.wt.stf"));
    ContType.insert(std::make_pair("vnd.wv.csp+xml", "application/vnd.wv.csp+xml"));
    ContType.insert(std::make_pair("vnd.wv.csp+wbxml", "application/vnd.wv.csp+wbxml"));
    ContType.insert(std::make_pair("vnd.wv.ssp+xml", "application/vnd.wv.ssp+xml"));
    ContType.insert(std::make_pair("vnd.xacml+json", "application/vnd.xacml+json"));
    ContType.insert(std::make_pair("vnd.xara", "application/vnd.xara"));
    ContType.insert(std::make_pair("vnd.xfdl", "application/vnd.xfdl"));
    ContType.insert(std::make_pair("vnd.xfdl.webform", "application/vnd.xfdl.webform"));
    ContType.insert(std::make_pair("vnd.xmi+xml", "application/vnd.xmi+xml"));
    ContType.insert(std::make_pair("vnd.xmpie.cpkg", "application/vnd.xmpie.cpkg"));
    ContType.insert(std::make_pair("vnd.xmpie.dpkg", "application/vnd.xmpie.dpkg"));
    ContType.insert(std::make_pair("vnd.xmpie.plan", "application/vnd.xmpie.plan"));
    ContType.insert(std::make_pair("vnd.xmpie.ppkg", "application/vnd.xmpie.ppkg"));
    ContType.insert(std::make_pair("vnd.xmpie.xlim", "application/vnd.xmpie.xlim"));
    ContType.insert(std::make_pair("vnd.yamaha.hv-dic", "application/vnd.yamaha.hv-dic"));
    ContType.insert(std::make_pair("vnd.yamaha.hv-script", "application/vnd.yamaha.hv-script"));
    ContType.insert(std::make_pair("vnd.yamaha.hv-voice", "application/vnd.yamaha.hv-voice"));
    ContType.insert(std::make_pair("vnd.yamaha.openscoreformat.osfpvg+xml", "application/vnd.yamaha.openscoreformat.osfpvg+xml"));
    ContType.insert(std::make_pair("vnd.yamaha.openscoreformat", "application/vnd.yamaha.openscoreformat"));
    ContType.insert(std::make_pair("vnd.yamaha.remote-setup", "application/vnd.yamaha.remote-setup"));
    ContType.insert(std::make_pair("vnd.yamaha.smaf-audio", "application/vnd.yamaha.smaf-audio"));
    ContType.insert(std::make_pair("vnd.yamaha.smaf-phrase", "application/vnd.yamaha.smaf-phrase"));
    ContType.insert(std::make_pair("vnd.yamaha.through-ngn", "application/vnd.yamaha.through-ngn"));
    ContType.insert(std::make_pair("vnd.yamaha.tunnel-udpencap", "application/vnd.yamaha.tunnel-udpencap"));
    ContType.insert(std::make_pair("vnd.yaoweme", "application/vnd.yaoweme"));
    ContType.insert(std::make_pair("vnd.yellowriver-custom-menu", "application/vnd.yellowriver-custom-menu"));
    ContType.insert(std::make_pair("vnd.youtube.yt (OBSOLETED in favor of video/vnd.youtube.yt)", "application/vnd.youtube.yt"));
    ContType.insert(std::make_pair("vnd.zul", "application/vnd.zul"));
    ContType.insert(std::make_pair("vnd.zzazz.deck+xml", "application/vnd.zzazz.deck+xml"));
    ContType.insert(std::make_pair("voicexml+xml", "application/voicexml+xml"));
    ContType.insert(std::make_pair("voucher-cms+json", "application/voucher-cms+json"));
    ContType.insert(std::make_pair("vq-rtcpxr", "application/vq-rtcpxr"));
    ContType.insert(std::make_pair("wasm", "application/wasm"));
    ContType.insert(std::make_pair("watcherinfo+xml", "application/watcherinfo+xml"));
    ContType.insert(std::make_pair("webpush-options+json", "application/webpush-options+json"));
    ContType.insert(std::make_pair("whoispp-query", "application/whoispp-query"));
    ContType.insert(std::make_pair("whoispp-response", "application/whoispp-response"));
    ContType.insert(std::make_pair("widget", "application/widget"));
    ContType.insert(std::make_pair("wita", "application/wita"));
    ContType.insert(std::make_pair("wordperfect5.1", "application/wordperfect5.1"));
    ContType.insert(std::make_pair("wsdl+xml", "application/wsdl+xml"));
    ContType.insert(std::make_pair("wspolicy+xml", "application/wspolicy+xml"));
    ContType.insert(std::make_pair("x-pki-message", "application/x-pki-message"));
    ContType.insert(std::make_pair("x-www-form-urlencoded", "application/x-www-form-urlencoded"));
    ContType.insert(std::make_pair("x-x509-ca-cert", "application/x-x509-ca-cert"));
    ContType.insert(std::make_pair("x-x509-ca-ra-cert", "application/x-x509-ca-ra-cert"));
    ContType.insert(std::make_pair("x-x509-next-ca-cert", "application/x-x509-next-ca-cert"));
    ContType.insert(std::make_pair("x400-bp", "application/x400-bp"));
    ContType.insert(std::make_pair("xacml+xml", "application/xacml+xml"));
    ContType.insert(std::make_pair("xcap-att+xml", "application/xcap-att+xml"));
    ContType.insert(std::make_pair("xcap-caps+xml", "application/xcap-caps+xml"));
    ContType.insert(std::make_pair("xcap-diff+xml", "application/xcap-diff+xml"));
    ContType.insert(std::make_pair("xcap-el+xml", "application/xcap-el+xml"));
    ContType.insert(std::make_pair("xcap-error+xml", "application/xcap-error+xml"));
    ContType.insert(std::make_pair("xcap-ns+xml", "application/xcap-ns+xml"));
    ContType.insert(std::make_pair("xcon-conference-info-diff+xml", "application/xcon-conference-info-diff+xml"));
    ContType.insert(std::make_pair("xcon-conference-info+xml", "application/xcon-conference-info+xml"));
    ContType.insert(std::make_pair("xenc+xml", "application/xenc+xml"));
    ContType.insert(std::make_pair("xhtml+xml", "application/xhtml+xml"));
    ContType.insert(std::make_pair("xliff+xml", "application/xliff+xml"));
    ContType.insert(std::make_pair("xml", "application/xml"));
    ContType.insert(std::make_pair("xml-dtd", "application/xml-dtd"));
    ContType.insert(std::make_pair("xml-external-parsed-entity", "application/xml-external-parsed-entity"));
    ContType.insert(std::make_pair("xml-patch+xml", "application/xml-patch+xml"));
    ContType.insert(std::make_pair("xmpp+xml", "application/xmpp+xml"));
    ContType.insert(std::make_pair("xop+xml", "application/xop+xml"));
    ContType.insert(std::make_pair("xslt+xml", "application/xslt+xml"));
    ContType.insert(std::make_pair("xv+xml", "application/xv+xml"));
    ContType.insert(std::make_pair("yang", "application/yang"));
    ContType.insert(std::make_pair("yang-data+json", "application/yang-data+json"));
    ContType.insert(std::make_pair("yang-data+xml", "application/yang-data+xml"));
    ContType.insert(std::make_pair("yang-patch+json", "application/yang-patch+json"));
    ContType.insert(std::make_pair("yang-patch+xml", "application/yang-patch+xml"));
    ContType.insert(std::make_pair("yin+xml", "application/yin+xml"));
    ContType.insert(std::make_pair("zip", "application/zip"));
    ContType.insert(std::make_pair("zlib", "application/zlib"));
    ContType.insert(std::make_pair("zstd", "application/zstd"));

    // audio
    ContType.insert(std::make_pair("1d-interleaved-parityfec", "audio/1d-interleaved-parityfec"));
    ContType.insert(std::make_pair("32kadpcm", "audio/32kadpcm"));
    ContType.insert(std::make_pair("3gpp", "audio/3gpp"));
    ContType.insert(std::make_pair("3gpp2", "audio/3gpp2"));
    ContType.insert(std::make_pair("aac", "audio/aac"));
    ContType.insert(std::make_pair("ac3", "audio/ac3"));
    ContType.insert(std::make_pair("AMR", "audio/AMR"));
    ContType.insert(std::make_pair("AMR-WB", "audio/AMR-WB"));
    ContType.insert(std::make_pair("amr-wb+", "audio/amr-wb+"));
    ContType.insert(std::make_pair("aptx", "audio/aptx"));
    ContType.insert(std::make_pair("asc", "audio/asc"));
    ContType.insert(std::make_pair("ATRAC-ADVANCED-LOSSLESS", "audio/ATRAC-ADVANCED-LOSSLESS"));
    ContType.insert(std::make_pair("ATRAC-X", "audio/ATRAC-X"));
    ContType.insert(std::make_pair("ATRAC3", "audio/ATRAC3"));
    ContType.insert(std::make_pair("basic", "audio/basic"));
    ContType.insert(std::make_pair("BV16", "audio/BV16"));
    ContType.insert(std::make_pair("BV32", "audio/BV32"));
    ContType.insert(std::make_pair("clearmode", "audio/clearmode"));
    ContType.insert(std::make_pair("CN", "audio/CN"));
    ContType.insert(std::make_pair("DAT12", "audio/DAT12"));
    ContType.insert(std::make_pair("dls", "audio/dls"));
    ContType.insert(std::make_pair("dsr-es201108", "audio/dsr-es201108"));
    ContType.insert(std::make_pair("dsr-es202050", "audio/dsr-es202050"));
    ContType.insert(std::make_pair("dsr-es202211", "audio/dsr-es202211"));
    ContType.insert(std::make_pair("dsr-es202212", "audio/dsr-es202212"));
    ContType.insert(std::make_pair("DV", "audio/DV"));
    ContType.insert(std::make_pair("DVI4", "audio/DVI4"));
    ContType.insert(std::make_pair("eac3", "audio/eac3"));
    ContType.insert(std::make_pair("encaprtp", "audio/encaprtp"));
    ContType.insert(std::make_pair("EVRC", "audio/EVRC"));
    ContType.insert(std::make_pair("EVRC-QCP", "audio/EVRC-QCP"));
    ContType.insert(std::make_pair("EVRC0", "audio/EVRC0"));
    ContType.insert(std::make_pair("EVRC1", "audio/EVRC1"));
    ContType.insert(std::make_pair("EVRCB", "audio/EVRCB"));
    ContType.insert(std::make_pair("EVRCB0", "audio/EVRCB0"));
    ContType.insert(std::make_pair("EVRCB1", "audio/EVRCB1"));
    ContType.insert(std::make_pair("EVRCNW", "audio/EVRCNW"));
    ContType.insert(std::make_pair("EVRCNW0", "audio/EVRCNW0"));
    ContType.insert(std::make_pair("EVRCNW1", "audio/EVRCNW1"));
    ContType.insert(std::make_pair("EVRCWB", "audio/EVRCWB"));
    ContType.insert(std::make_pair("EVRCWB0", "audio/EVRCWB0"));
    ContType.insert(std::make_pair("EVRCWB1", "audio/EVRCWB1"));
    ContType.insert(std::make_pair("EVS", "audio/EVS"));
    ContType.insert(std::make_pair("example", "audio/example"));
    ContType.insert(std::make_pair("flexfec", "audio/flexfec"));
    ContType.insert(std::make_pair("fwdred", "audio/fwdred"));
    ContType.insert(std::make_pair("G711-0", "audio/G711-0"));
    ContType.insert(std::make_pair("G719", "audio/G719"));
    ContType.insert(std::make_pair("G7221", "audio/G7221"));
    ContType.insert(std::make_pair("G722", "audio/G722"));
    ContType.insert(std::make_pair("G723", "audio/G723"));
    ContType.insert(std::make_pair("G726-16", "audio/G726-16"));
    ContType.insert(std::make_pair("G726-24", "audio/G726-24"));
    ContType.insert(std::make_pair("G726-32", "audio/G726-32"));
    ContType.insert(std::make_pair("G726-40", "audio/G726-40"));
    ContType.insert(std::make_pair("G728", "audio/G728"));
    ContType.insert(std::make_pair("G729", "audio/G729"));
    ContType.insert(std::make_pair("G7291", "audio/G7291"));
    ContType.insert(std::make_pair("G729D", "audio/G729D"));
    ContType.insert(std::make_pair("G729E", "audio/G729E"));
    ContType.insert(std::make_pair("GSM", "audio/GSM"));
    ContType.insert(std::make_pair("GSM-EFR", "audio/GSM-EFR"));
    ContType.insert(std::make_pair("GSM-HR-08", "audio/GSM-HR-08"));
    ContType.insert(std::make_pair("iLBC", "audio/iLBC"));
    ContType.insert(std::make_pair("ip-mr_v2.5", "audio/ip-mr_v2.5"));
    ContType.insert(std::make_pair("L8", "audio/L8"));
    ContType.insert(std::make_pair("L16", "audio/L16"));
    ContType.insert(std::make_pair("L20", "audio/L20"));
    ContType.insert(std::make_pair("L24", "audio/L24"));
    ContType.insert(std::make_pair("LPC", "audio/LPC"));
    ContType.insert(std::make_pair("MELP", "audio/MELP"));
    ContType.insert(std::make_pair("MELP600", "audio/MELP600"));
    ContType.insert(std::make_pair("MELP1200", "audio/MELP1200"));
    ContType.insert(std::make_pair("MELP2400", "audio/MELP2400"));
    ContType.insert(std::make_pair("mhas", "audio/mhas"));
    ContType.insert(std::make_pair("mobile-xmf", "audio/mobile-xmf"));
    ContType.insert(std::make_pair("MPA", "audio/MPA"));
    ContType.insert(std::make_pair("mp4", "audio/mp4"));
    ContType.insert(std::make_pair("MP4A-LATM", "audio/MP4A-LATM"));
    ContType.insert(std::make_pair("mpa-robust", "audio/mpa-robust"));
    ContType.insert(std::make_pair("mpeg", "audio/mpeg"));
    ContType.insert(std::make_pair("mpeg4-generic", "audio/mpeg4-generic"));
    ContType.insert(std::make_pair("ogg", "audio/ogg"));
    ContType.insert(std::make_pair("opus", "audio/opus"));
    ContType.insert(std::make_pair("parityfec", "audio/parityfec"));
    ContType.insert(std::make_pair("PCMA", "audio/PCMA"));
    ContType.insert(std::make_pair("PCMA-WB", "audio/PCMA-WB"));
    ContType.insert(std::make_pair("PCMU", "audio/PCMU"));
    ContType.insert(std::make_pair("PCMU-WB", "audio/PCMU-WB"));
    ContType.insert(std::make_pair("prs.sid", "audio/prs.sid"));
    ContType.insert(std::make_pair("QCELP", "audio/QCELP"));
    ContType.insert(std::make_pair("raptorfec", "audio/raptorfec"));
    ContType.insert(std::make_pair("RED", "audio/RED"));
    ContType.insert(std::make_pair("rtp-enc-aescm128", "audio/rtp-enc-aescm128"));
    ContType.insert(std::make_pair("rtploopback", "audio/rtploopback"));
    ContType.insert(std::make_pair("rtp-midi", "audio/rtp-midi"));
    ContType.insert(std::make_pair("rtx", "audio/rtx"));
    ContType.insert(std::make_pair("scip", "audio/scip"));
    ContType.insert(std::make_pair("SMV", "audio/SMV"));
    ContType.insert(std::make_pair("SMV0", "audio/SMV0"));
    ContType.insert(std::make_pair("SMV-QCP", "audio/SMV-QCP"));
    ContType.insert(std::make_pair("sofa", "audio/sofa"));
    ContType.insert(std::make_pair("sp-midi", "audio/sp-midi"));
    ContType.insert(std::make_pair("speex", "audio/speex"));
    ContType.insert(std::make_pair("t140c", "audio/t140c"));
    ContType.insert(std::make_pair("t38", "audio/t38"));
    ContType.insert(std::make_pair("telephone-event", "audio/telephone-event"));
    ContType.insert(std::make_pair("TETRA_ACELP", "audio/TETRA_ACELP"));
    ContType.insert(std::make_pair("TETRA_ACELP_BB", "audio/TETRA_ACELP_BB"));
    ContType.insert(std::make_pair("tone", "audio/tone"));
    ContType.insert(std::make_pair("TSVCIS", "audio/TSVCIS"));
    ContType.insert(std::make_pair("UEMCLIP", "audio/UEMCLIP"));
    ContType.insert(std::make_pair("ulpfec", "audio/ulpfec"));
    ContType.insert(std::make_pair("usac", "audio/usac"));
    ContType.insert(std::make_pair("VDVI", "audio/VDVI"));
    ContType.insert(std::make_pair("VMR-WB", "audio/VMR-WB"));
    ContType.insert(std::make_pair("vnd.3gpp.iufp", "audio/vnd.3gpp.iufp"));
    ContType.insert(std::make_pair("vnd.4SB", "audio/vnd.4SB"));
    ContType.insert(std::make_pair("vnd.audiokoz", "audio/vnd.audiokoz"));
    ContType.insert(std::make_pair("vnd.CELP", "audio/vnd.CELP"));
    ContType.insert(std::make_pair("vnd.cisco.nse", "audio/vnd.cisco.nse"));
    ContType.insert(std::make_pair("vnd.cmles.radio-events", "audio/vnd.cmles.radio-events"));
    ContType.insert(std::make_pair("vnd.cns.anp1", "audio/vnd.cns.anp1"));
    ContType.insert(std::make_pair("vnd.cns.inf1", "audio/vnd.cns.inf1"));
    ContType.insert(std::make_pair("vnd.dece.audio", "audio/vnd.dece.audio"));
    ContType.insert(std::make_pair("vnd.digital-winds", "audio/vnd.digital-winds"));
    ContType.insert(std::make_pair("vnd.dlna.adts", "audio/vnd.dlna.adts"));
    ContType.insert(std::make_pair("vnd.dolby.heaac.1", "audio/vnd.dolby.heaac.1"));
    ContType.insert(std::make_pair("vnd.dolby.heaac.2", "audio/vnd.dolby.heaac.2"));
    ContType.insert(std::make_pair("vnd.dolby.mlp", "audio/vnd.dolby.mlp"));
    ContType.insert(std::make_pair("vnd.dolby.mps", "audio/vnd.dolby.mps"));
    ContType.insert(std::make_pair("vnd.dolby.pl2", "audio/vnd.dolby.pl2"));
    ContType.insert(std::make_pair("vnd.dolby.pl2x", "audio/vnd.dolby.pl2x"));
    ContType.insert(std::make_pair("vnd.dolby.pl2z", "audio/vnd.dolby.pl2z"));
    ContType.insert(std::make_pair("vnd.dolby.pulse.1", "audio/vnd.dolby.pulse.1"));
    ContType.insert(std::make_pair("vnd.dra", "audio/vnd.dra"));
    ContType.insert(std::make_pair("vnd.dts", "audio/vnd.dts"));
    ContType.insert(std::make_pair("vnd.dts.hd", "audio/vnd.dts.hd"));
    ContType.insert(std::make_pair("vnd.dts.uhd", "audio/vnd.dts.uhd"));
    ContType.insert(std::make_pair("vnd.dvb.file", "audio/vnd.dvb.file"));
    ContType.insert(std::make_pair("vnd.everad.plj", "audio/vnd.everad.plj"));
    ContType.insert(std::make_pair("vnd.hns.audio", "audio/vnd.hns.audio"));
    ContType.insert(std::make_pair("vnd.lucent.voice", "audio/vnd.lucent.voice"));
    ContType.insert(std::make_pair("vnd.ms-playready.media.pya", "audio/vnd.ms-playready.media.pya"));
    ContType.insert(std::make_pair("vnd.nokia.mobile-xmf", "audio/vnd.nokia.mobile-xmf"));
    ContType.insert(std::make_pair("vnd.nortel.vbk", "audio/vnd.nortel.vbk"));
    ContType.insert(std::make_pair("vnd.nuera.ecelp4800", "audio/vnd.nuera.ecelp4800"));
    ContType.insert(std::make_pair("vnd.nuera.ecelp7470", "audio/vnd.nuera.ecelp7470"));
    ContType.insert(std::make_pair("vnd.nuera.ecelp9600", "audio/vnd.nuera.ecelp9600"));
    ContType.insert(std::make_pair("vnd.octel.sbc", "audio/vnd.octel.sbc"));
    ContType.insert(std::make_pair("vnd.presonus.multitrack", "audio/vnd.presonus.multitrack"));
    ContType.insert(std::make_pair("vnd.qcelp - DEPRECATED in favor of audio/qcelp", "audio/vnd.qcelp"));
    ContType.insert(std::make_pair("vnd.rhetorex.32kadpcm", "audio/vnd.rhetorex.32kadpcm"));
    ContType.insert(std::make_pair("vnd.rip", "audio/vnd.rip"));
    ContType.insert(std::make_pair("vnd.sealedmedia.softseal.mpeg", "audio/vnd.sealedmedia.softseal.mpeg"));
    ContType.insert(std::make_pair("vnd.vmx.cvsd", "audio/vnd.vmx.cvsd"));
    ContType.insert(std::make_pair("vorbis", "audio/vorbis"));
    ContType.insert(std::make_pair("vorbis-config", "audio/vorbis-config"));

    // font
    ContType.insert(std::make_pair("collection", "font/collection"));
    ContType.insert(std::make_pair("otf", "font/otf"));
    ContType.insert(std::make_pair("sfnt", "font/sfnt"));
    ContType.insert(std::make_pair("ttf", "font/ttf"));
    ContType.insert(std::make_pair("woff", "font/woff"));
    ContType.insert(std::make_pair("woff2", "font/woff2"));

    // image
    ContType.insert(std::make_pair("aces", "image/aces"));
    ContType.insert(std::make_pair("avci", "image/avci"));
    ContType.insert(std::make_pair("avcs", "image/avcs"));
    ContType.insert(std::make_pair("avif", "image/avif"));
    ContType.insert(std::make_pair("bmp", "image/bmp"));
    ContType.insert(std::make_pair("cgm", "image/cgm"));
    ContType.insert(std::make_pair("dicom-rle", "image/dicom-rle"));
    ContType.insert(std::make_pair("emf", "image/emf"));
    ContType.insert(std::make_pair("example", "image/example"));
    ContType.insert(std::make_pair("fits", "image/fits"));
    ContType.insert(std::make_pair("g3fax", "image/g3fax"));
    ContType.insert(std::make_pair("gif", "image/gif"));
    ContType.insert(std::make_pair("heic", "image/heic"));
    ContType.insert(std::make_pair("heic-sequence", "image/heic-sequence"));
    ContType.insert(std::make_pair("heif", "image/heif"));
    ContType.insert(std::make_pair("heif-sequence", "image/heif-sequence"));
    ContType.insert(std::make_pair("hej2k", "image/hej2k"));
    ContType.insert(std::make_pair("hsj2", "image/hsj2"));
    ContType.insert(std::make_pair("ief", "image/ief"));
    ContType.insert(std::make_pair("jls", "image/jls"));
    ContType.insert(std::make_pair("jp2", "image/jp2"));
    ContType.insert(std::make_pair("jpeg", "image/jpeg"));
    ContType.insert(std::make_pair("jpg", "image/jpeg"));
    ContType.insert(std::make_pair("jph", "image/jph"));
    ContType.insert(std::make_pair("jphc", "image/jphc"));
    ContType.insert(std::make_pair("jpm", "image/jpm"));
    ContType.insert(std::make_pair("jpx", "image/jpx"));
    ContType.insert(std::make_pair("jxr", "image/jxr"));
    ContType.insert(std::make_pair("jxrA", "image/jxrA"));
    ContType.insert(std::make_pair("jxrS", "image/jxrS"));
    ContType.insert(std::make_pair("jxs", "image/jxs"));
    ContType.insert(std::make_pair("jxsc", "image/jxsc"));
    ContType.insert(std::make_pair("jxsi", "image/jxsi"));
    ContType.insert(std::make_pair("jxss", "image/jxss"));
    ContType.insert(std::make_pair("ktx", "image/ktx"));
    ContType.insert(std::make_pair("ktx2", "image/ktx2"));
    ContType.insert(std::make_pair("naplps", "image/naplps"));
    ContType.insert(std::make_pair("png", "image/png"));
    ContType.insert(std::make_pair("prs.btif", "image/prs.btif"));
    ContType.insert(std::make_pair("prs.pti", "image/prs.pti"));
    ContType.insert(std::make_pair("pwg-raster", "image/pwg-raster"));
    ContType.insert(std::make_pair("svg+xml", "image/svg+xml"));
    ContType.insert(std::make_pair("t38", "image/t38"));
    ContType.insert(std::make_pair("tiff", "image/tiff"));
    ContType.insert(std::make_pair("tiff-fx", "image/tiff-fx"));
    ContType.insert(std::make_pair("vnd.adobe.photoshop", "image/vnd.adobe.photoshop"));
    ContType.insert(std::make_pair("vnd.airzip.accelerator.azv", "image/vnd.airzip.accelerator.azv"));
    ContType.insert(std::make_pair("vnd.cns.inf2", "image/vnd.cns.inf2"));
    ContType.insert(std::make_pair("vnd.dece.graphic", "image/vnd.dece.graphic"));
    ContType.insert(std::make_pair("vnd.djvu", "image/vnd.djvu"));
    ContType.insert(std::make_pair("vnd.dwg", "image/vnd.dwg"));
    ContType.insert(std::make_pair("vnd.dxf", "image/vnd.dxf"));
    ContType.insert(std::make_pair("vnd.dvb.subtitle", "image/vnd.dvb.subtitle"));
    ContType.insert(std::make_pair("vnd.fastbidsheet", "image/vnd.fastbidsheet"));
    ContType.insert(std::make_pair("vnd.fpx", "image/vnd.fpx"));
    ContType.insert(std::make_pair("vnd.fst", "image/vnd.fst"));
    ContType.insert(std::make_pair("vnd.fujixerox.edmics-mmr", "image/vnd.fujixerox.edmics-mmr"));
    ContType.insert(std::make_pair("vnd.fujixerox.edmics-rlc", "image/vnd.fujixerox.edmics-rlc"));
    ContType.insert(std::make_pair("vnd.globalgraphics.pgb", "image/vnd.globalgraphics.pgb"));
    ContType.insert(std::make_pair("vnd.microsoft.icon", "image/vnd.microsoft.icon"));
    ContType.insert(std::make_pair("vnd.mix", "image/vnd.mix"));
    ContType.insert(std::make_pair("vnd.ms-modi", "image/vnd.ms-modi"));
    ContType.insert(std::make_pair("vnd.mozilla.apng", "image/vnd.mozilla.apng"));
    ContType.insert(std::make_pair("vnd.net-fpx", "image/vnd.net-fpx"));
    ContType.insert(std::make_pair("vnd.pco.b16", "image/vnd.pco.b16"));
    ContType.insert(std::make_pair("vnd.radiance", "image/vnd.radiance"));
    ContType.insert(std::make_pair("vnd.sealed.png", "image/vnd.sealed.png"));
    ContType.insert(std::make_pair("vnd.sealedmedia.softseal.gif", "image/vnd.sealedmedia.softseal.gif"));
    ContType.insert(std::make_pair("vnd.sealedmedia.softseal.jpg", "image/vnd.sealedmedia.softseal.jpg"));
    ContType.insert(std::make_pair("vnd.svf", "image/vnd.svf"));
    ContType.insert(std::make_pair("vnd.tencent.tap", "image/vnd.tencent.tap"));
    ContType.insert(std::make_pair("vnd.valve.source.texture", "image/vnd.valve.source.texture"));
    ContType.insert(std::make_pair("vnd.wap.wbmp", "image/vnd.wap.wbmp"));
    ContType.insert(std::make_pair("vnd.xiff", "image/vnd.xiff"));
    ContType.insert(std::make_pair("vnd.zbrush.pcx", "image/vnd.zbrush.pcx"));
    ContType.insert(std::make_pair("wmf", "image/wmf"));
    ContType.insert(std::make_pair("x-emf - DEPRECATED in favor of image/emf", "image/emf"));
    ContType.insert(std::make_pair("x-wmf - DEPRECATED in favor of image/wmf", "image/wmf"));

    // message
    ContType.insert(std::make_pair("CPIM", "message/CPIM"));
    ContType.insert(std::make_pair("delivery-status", "message/delivery-status"));
    ContType.insert(std::make_pair("disposition-notification", "message/disposition-notification"));
    ContType.insert(std::make_pair("example", "message/example"));
    ContType.insert(std::make_pair("external-body", "message/external-body"));
    ContType.insert(std::make_pair("feedback-report", "message/feedback-report"));
    ContType.insert(std::make_pair("global", "message/global"));
    ContType.insert(std::make_pair("global-delivery-status", "message/global-delivery-status"));
    ContType.insert(std::make_pair("global-disposition-notification", "message/global-disposition-notification"));
    ContType.insert(std::make_pair("global-headers", "message/global-headers"));
    ContType.insert(std::make_pair("http", "message/http"));
    ContType.insert(std::make_pair("imdn+xml", "message/imdn+xml"));
    ContType.insert(std::make_pair("news (OBSOLETED by [RFC5537])", "message/news"));
    ContType.insert(std::make_pair("partial", "message/partial"));
    ContType.insert(std::make_pair("rfc822", "message/rfc822"));
    ContType.insert(std::make_pair("s-http (OBSOLETE)", "message/s-http"));
    ContType.insert(std::make_pair("sip", "message/sip"));
    ContType.insert(std::make_pair("sipfrag", "message/sipfrag"));
    ContType.insert(std::make_pair("tracking-status", "message/tracking-status"));
    ContType.insert(std::make_pair("vnd.si.simp (OBSOLETED by request)", "message/vnd.si.simp"));
    ContType.insert(std::make_pair("vnd.wfa.wsc", "message/vnd.wfa.wsc"));

    // model
    ContType.insert(std::make_pair("3mf", "model/3mf"));
    ContType.insert(std::make_pair("e57", "model/e57"));
    ContType.insert(std::make_pair("example", "model/example"));
    ContType.insert(std::make_pair("gltf-binary", "model/gltf-binary"));
    ContType.insert(std::make_pair("gltf+json", "model/gltf+json"));
    ContType.insert(std::make_pair("iges", "model/iges"));
    ContType.insert(std::make_pair("mesh", "model/mesh"));
    ContType.insert(std::make_pair("mtl", "model/mtl"));
    ContType.insert(std::make_pair("obj", "model/obj"));
    ContType.insert(std::make_pair("step", "model/step"));
    ContType.insert(std::make_pair("step+xml", "model/step+xml"));
    ContType.insert(std::make_pair("step+zip", "model/step+zip"));
    ContType.insert(std::make_pair("step-xml+zip", "model/step-xml+zip"));
    ContType.insert(std::make_pair("stl", "model/stl"));
    ContType.insert(std::make_pair("vnd.collada+xml", "model/vnd.collada+xml"));
    ContType.insert(std::make_pair("vnd.dwf", "model/vnd.dwf"));
    ContType.insert(std::make_pair("vnd.flatland.3dml", "model/vnd.flatland.3dml"));
    ContType.insert(std::make_pair("vnd.gdl", "model/vnd.gdl"));
    ContType.insert(std::make_pair("vnd.gs-gdl", "model/vnd.gs-gdl"));
    ContType.insert(std::make_pair("vnd.gtw", "model/vnd.gtw"));
    ContType.insert(std::make_pair("vnd.moml+xml", "model/vnd.moml+xml"));
    ContType.insert(std::make_pair("vnd.mts", "model/vnd.mts"));
    ContType.insert(std::make_pair("vnd.opengex", "model/vnd.opengex"));
    ContType.insert(std::make_pair("vnd.parasolid.transmit.binary", "model/vnd.parasolid.transmit.binary"));
    ContType.insert(std::make_pair("vnd.parasolid.transmit.text", "model/vnd.parasolid.transmit.text"));
    ContType.insert(std::make_pair("vnd.pytha.pyox", "model/vnd.pytha.pyox"));
    ContType.insert(std::make_pair("vnd.rosette.annotated-data-model", "model/vnd.rosette.annotated-data-model"));
    ContType.insert(std::make_pair("vnd.sap.vds", "model/vnd.sap.vds"));
    ContType.insert(std::make_pair("vnd.usdz+zip", "model/vnd.usdz+zip"));
    ContType.insert(std::make_pair("vnd.valve.source.compiled-map", "model/vnd.valve.source.compiled-map"));
    ContType.insert(std::make_pair("vnd.vtu", "model/vnd.vtu"));
    ContType.insert(std::make_pair("vrml", "model/vrml"));
    ContType.insert(std::make_pair("x3d-vrml", "model/x3d-vrml"));
    ContType.insert(std::make_pair("x3d+fastinfoset", "model/x3d+fastinfoset"));
    ContType.insert(std::make_pair("x3d+xml", "model/x3d+xml"));

    // text
    ContType.insert(std::make_pair("1d-interleaved-parityfec", "text/1d-interleaved-parityfec"));
    ContType.insert(std::make_pair("cache-manifest", "text/cache-manifest"));
    ContType.insert(std::make_pair("calendar", "text/calendar"));
    ContType.insert(std::make_pair("cql", "text/cql"));
    ContType.insert(std::make_pair("cql-expression", "text/cql-expression"));
    ContType.insert(std::make_pair("cql-identifier", "text/cql-identifier"));
    ContType.insert(std::make_pair("css", "text/css"));
    ContType.insert(std::make_pair("csv", "text/csv"));
    ContType.insert(std::make_pair("csv-schema", "text/csv-schema"));
    ContType.insert(std::make_pair("directory - DEPRECATED by RFC6350", "text/directory"));
    ContType.insert(std::make_pair("dns", "text/dns"));
    ContType.insert(std::make_pair("ecmascript (OBSOLETED in favor of application/ecmascript)", "text/ecmascript"));
    ContType.insert(std::make_pair("encaprtp", "text/encaprtp"));
    ContType.insert(std::make_pair("enriched", "text/enriched"));
    ContType.insert(std::make_pair("example", "text/example"));
    ContType.insert(std::make_pair("fhirpath", "text/fhirpath"));
    ContType.insert(std::make_pair("flexfec", "text/flexfec"));
    ContType.insert(std::make_pair("fwdred", "text/fwdred"));
    ContType.insert(std::make_pair("gff3", "text/gff3"));
    ContType.insert(std::make_pair("grammar-ref-list", "text/grammar-ref-list"));
    ContType.insert(std::make_pair("html", "text/html"));
    ContType.insert(std::make_pair("javascript (OBSOLETED in favor of application/javascript)", "text/javascript"));
    ContType.insert(std::make_pair("jcr-cnd", "text/jcr-cnd"));
    ContType.insert(std::make_pair("markdown", "text/markdown"));
    ContType.insert(std::make_pair("mizar", "text/mizar"));
    ContType.insert(std::make_pair("n3", "text/n3"));
    ContType.insert(std::make_pair("parameters", "text/parameters"));
    ContType.insert(std::make_pair("parityfec", "text/parityfec"));
    ContType.insert(std::make_pair("plain", "text/plain"));
    ContType.insert(std::make_pair("provenance-notation", "text/provenance-notation"));
    ContType.insert(std::make_pair("prs.fallenstein.rst", "text/prs.fallenstein.rst"));
    ContType.insert(std::make_pair("prs.lines.tag", "text/prs.lines.tag"));
    ContType.insert(std::make_pair("prs.prop.logic", "text/prs.prop.logic"));
    ContType.insert(std::make_pair("raptorfec", "text/raptorfec"));
    ContType.insert(std::make_pair("RED", "text/RED"));
    ContType.insert(std::make_pair("rfc822-headers", "text/rfc822-headers"));
    ContType.insert(std::make_pair("richtext", "text/richtext"));
    ContType.insert(std::make_pair("rtf", "text/rtf"));
    ContType.insert(std::make_pair("rtp-enc-aescm128", "text/rtp-enc-aescm128"));
    ContType.insert(std::make_pair("rtploopback", "text/rtploopback"));
    ContType.insert(std::make_pair("rtx", "text/rtx"));
    ContType.insert(std::make_pair("SGML", "text/SGML"));
    ContType.insert(std::make_pair("shaclc", "text/shaclc"));
    ContType.insert(std::make_pair("shex", "text/shex"));
    ContType.insert(std::make_pair("spdx", "text/spdx"));
    ContType.insert(std::make_pair("strings", "text/strings"));
    ContType.insert(std::make_pair("t140", "text/t140"));
    ContType.insert(std::make_pair("tab-separated-values", "text/tab-separated-values"));
    ContType.insert(std::make_pair("troff", "text/troff"));
    ContType.insert(std::make_pair("turtle", "text/turtle"));
    ContType.insert(std::make_pair("ulpfec", "text/ulpfec"));
    ContType.insert(std::make_pair("uri-list", "text/uri-list"));
    ContType.insert(std::make_pair("vcard", "text/vcard"));
    ContType.insert(std::make_pair("vnd.a", "text/vnd.a"));
    ContType.insert(std::make_pair("vnd.abc", "text/vnd.abc"));
    ContType.insert(std::make_pair("vnd.ascii-art", "text/vnd.ascii-art"));
    ContType.insert(std::make_pair("vnd.curl", "text/vnd.curl"));
    ContType.insert(std::make_pair("vnd.debian.copyright", "text/vnd.debian.copyright"));
    ContType.insert(std::make_pair("vnd.DMClientScript", "text/vnd.DMClientScript"));
    ContType.insert(std::make_pair("vnd.dvb.subtitle", "text/vnd.dvb.subtitle"));
    ContType.insert(std::make_pair("vnd.esmertec.theme-descriptor", "text/vnd.esmertec.theme-descriptor"));
    ContType.insert(std::make_pair("vnd.familysearch.gedcom", "text/vnd.familysearch.gedcom"));
    ContType.insert(std::make_pair("vnd.ficlab.flt", "text/vnd.ficlab.flt"));
    ContType.insert(std::make_pair("vnd.fly", "text/vnd.fly"));
    ContType.insert(std::make_pair("vnd.fmi.flexstor", "text/vnd.fmi.flexstor"));
    ContType.insert(std::make_pair("vnd.gml", "text/vnd.gml"));
    ContType.insert(std::make_pair("vnd.graphviz", "text/vnd.graphviz"));
    ContType.insert(std::make_pair("vnd.hans", "text/vnd.hans"));
    ContType.insert(std::make_pair("vnd.hgl", "text/vnd.hgl"));
    ContType.insert(std::make_pair("vnd.in3d.3dml", "text/vnd.in3d.3dml"));
    ContType.insert(std::make_pair("vnd.in3d.spot", "text/vnd.in3d.spot"));
    ContType.insert(std::make_pair("vnd.IPTC.NewsML", "text/vnd.IPTC.NewsML"));
    ContType.insert(std::make_pair("vnd.IPTC.NITF", "text/vnd.IPTC.NITF"));
    ContType.insert(std::make_pair("vnd.latex-z", "text/vnd.latex-z"));
    ContType.insert(std::make_pair("vnd.motorola.reflex", "text/vnd.motorola.reflex"));
    ContType.insert(std::make_pair("vnd.ms-mediapackage", "text/vnd.ms-mediapackage"));
    ContType.insert(std::make_pair("vnd.net2phone.commcenter.command", "text/vnd.net2phone.commcenter.command"));
    ContType.insert(std::make_pair("vnd.radisys.msml-basic-layout", "text/vnd.radisys.msml-basic-layout"));
    ContType.insert(std::make_pair("vnd.senx.warpscript", "text/vnd.senx.warpscript"));
    ContType.insert(std::make_pair("vnd.si.uricatalogue (OBSOLETED by request)", "text/vnd.si.uricatalogue"));
    ContType.insert(std::make_pair("vnd.sun.j2me.app-descriptor", "text/vnd.sun.j2me.app-descriptor"));
    ContType.insert(std::make_pair("vnd.sosi", "text/vnd.sosi"));
    ContType.insert(std::make_pair("vnd.trolltech.linguist", "text/vnd.trolltech.linguist"));
    ContType.insert(std::make_pair("vnd.wap.si", "text/vnd.wap.si"));
    ContType.insert(std::make_pair("vnd.wap.sl", "text/vnd.wap.sl"));
    ContType.insert(std::make_pair("vnd.wap.wml", "text/vnd.wap.wml"));
    ContType.insert(std::make_pair("vnd.wap.wmlscript", "text/vnd.wap.wmlscript"));
    ContType.insert(std::make_pair("vtt", "text/vtt"));
    ContType.insert(std::make_pair("xml", "text/xml"));
    ContType.insert(std::make_pair("xml-external-parsed-entity", "text/xml-external-parsed-entity"));

    // video
    ContType.insert(std::make_pair("1d-interleaved-parityfec", "video/1d-interleaved-parityfec"));
    ContType.insert(std::make_pair("3gpp", "video/3gpp"));
    ContType.insert(std::make_pair("3gpp2", "video/3gpp2"));
    ContType.insert(std::make_pair("3gpp-tt", "video/3gpp-tt"));
    ContType.insert(std::make_pair("AV1", "video/AV1"));
    ContType.insert(std::make_pair("BMPEG", "video/BMPEG"));
    ContType.insert(std::make_pair("BT656", "video/BT656"));
    ContType.insert(std::make_pair("CelB", "video/CelB"));
    ContType.insert(std::make_pair("DV", "video/DV"));
    ContType.insert(std::make_pair("encaprtp", "video/encaprtp"));
    ContType.insert(std::make_pair("example", "video/example"));
    ContType.insert(std::make_pair("FFV1", "video/FFV1"));
    ContType.insert(std::make_pair("flexfec", "video/flexfec"));
    ContType.insert(std::make_pair("H261", "video/H261"));
    ContType.insert(std::make_pair("H263", "video/H263"));
    ContType.insert(std::make_pair("H263-1998", "video/H263-1998"));
    ContType.insert(std::make_pair("H263-2000", "video/H263-2000"));
    ContType.insert(std::make_pair("H264", "video/H264"));
    ContType.insert(std::make_pair("H264-RCDO", "video/H264-RCDO"));
    ContType.insert(std::make_pair("H264-SVC", "video/H264-SVC"));
    ContType.insert(std::make_pair("H265", "video/H265"));
    ContType.insert(std::make_pair("iso.segment", "video/iso.segment"));
    ContType.insert(std::make_pair("JPEG", "video/JPEG"));
    ContType.insert(std::make_pair("jpeg2000", "video/jpeg2000"));
    ContType.insert(std::make_pair("jxsv", "video/jxsv"));
    ContType.insert(std::make_pair("mj2", "video/mj2"));
    ContType.insert(std::make_pair("MP1S", "video/MP1S"));
    ContType.insert(std::make_pair("MP2P", "video/MP2P"));
    ContType.insert(std::make_pair("MP2T", "video/MP2T"));
    ContType.insert(std::make_pair("mp4", "video/mp4"));
    ContType.insert(std::make_pair("MP4V-ES", "video/MP4V-ES"));
    ContType.insert(std::make_pair("MPV", "video/MPV"));
    ContType.insert(std::make_pair("mpeg", "video/mpeg"));
    ContType.insert(std::make_pair("mpeg4-generic", "video/mpeg4-generic"));
    ContType.insert(std::make_pair("nv", "video/nv"));
    ContType.insert(std::make_pair("ogg", "video/ogg"));
    ContType.insert(std::make_pair("parityfec", "video/parityfec"));
    ContType.insert(std::make_pair("pointer", "video/pointer"));
    ContType.insert(std::make_pair("quicktime", "video/quicktime"));
    ContType.insert(std::make_pair("raptorfec", "video/raptorfec"));
    ContType.insert(std::make_pair("raw", "video/raw"));
    ContType.insert(std::make_pair("rtp-enc-aescm128", "video/rtp-enc-aescm128"));
    ContType.insert(std::make_pair("rtploopback", "video/rtploopback"));
    ContType.insert(std::make_pair("rtx", "video/rtx"));
    ContType.insert(std::make_pair("scip", "video/scip"));
    ContType.insert(std::make_pair("smpte291", "video/smpte291"));
    ContType.insert(std::make_pair("SMPTE292M", "video/SMPTE292M"));
    ContType.insert(std::make_pair("ulpfec", "video/ulpfec"));
    ContType.insert(std::make_pair("vc1", "video/vc1"));
    ContType.insert(std::make_pair("vc2", "video/vc2"));
    ContType.insert(std::make_pair("vnd.CCTV", "video/vnd.CCTV"));
    ContType.insert(std::make_pair("vnd.dece.hd", "video/vnd.dece.hd"));
    ContType.insert(std::make_pair("vnd.dece.mobile", "video/vnd.dece.mobile"));
    ContType.insert(std::make_pair("vnd.dece.mp4", "video/vnd.dece.mp4"));
    ContType.insert(std::make_pair("vnd.dece.pd", "video/vnd.dece.pd"));
    ContType.insert(std::make_pair("vnd.dece.sd", "video/vnd.dece.sd"));
    ContType.insert(std::make_pair("vnd.dece.video", "video/vnd.dece.video"));
    ContType.insert(std::make_pair("vnd.directv.mpeg", "video/vnd.directv.mpeg"));
    ContType.insert(std::make_pair("vnd.directv.mpeg-tts", "video/vnd.directv.mpeg-tts"));
    ContType.insert(std::make_pair("vnd.dlna.mpeg-tts", "video/vnd.dlna.mpeg-tts"));
    ContType.insert(std::make_pair("vnd.dvb.file", "video/vnd.dvb.file"));
    ContType.insert(std::make_pair("vnd.fvt", "video/vnd.fvt"));
    ContType.insert(std::make_pair("vnd.hns.video", "video/vnd.hns.video"));
    ContType.insert(std::make_pair("vnd.iptvforum.1dparityfec-1010", "video/vnd.iptvforum.1dparityfec-1010"));
    ContType.insert(std::make_pair("vnd.iptvforum.1dparityfec-2005", "video/vnd.iptvforum.1dparityfec-2005"));
    ContType.insert(std::make_pair("vnd.iptvforum.2dparityfec-1010", "video/vnd.iptvforum.2dparityfec-1010"));
    ContType.insert(std::make_pair("vnd.iptvforum.2dparityfec-2005", "video/vnd.iptvforum.2dparityfec-2005"));
    ContType.insert(std::make_pair("vnd.iptvforum.ttsavc", "video/vnd.iptvforum.ttsavc"));
    ContType.insert(std::make_pair("vnd.iptvforum.ttsmpeg2", "video/vnd.iptvforum.ttsmpeg2"));
    ContType.insert(std::make_pair("vnd.motorola.video", "video/vnd.motorola.video"));
    ContType.insert(std::make_pair("vnd.motorola.videop", "video/vnd.motorola.videop"));
    ContType.insert(std::make_pair("vnd.mpegurl", "video/vnd.mpegurl"));
    ContType.insert(std::make_pair("vnd.ms-playready.media.pyv", "video/vnd.ms-playready.media.pyv"));
    ContType.insert(std::make_pair("vnd.nokia.interleaved-multimedia", "video/vnd.nokia.interleaved-multimedia"));
    ContType.insert(std::make_pair("vnd.nokia.mp4vr", "video/vnd.nokia.mp4vr"));
    ContType.insert(std::make_pair("vnd.nokia.videovoip", "video/vnd.nokia.videovoip"));
    ContType.insert(std::make_pair("vnd.objectvideo", "video/vnd.objectvideo"));
    ContType.insert(std::make_pair("vnd.radgamettools.bink", "video/vnd.radgamettools.bink"));
    ContType.insert(std::make_pair("vnd.radgamettools.smacker", "video/vnd.radgamettools.smacker"));
    ContType.insert(std::make_pair("vnd.sealed.mpeg1", "video/vnd.sealed.mpeg1"));
    ContType.insert(std::make_pair("vnd.sealed.mpeg4", "video/vnd.sealed.mpeg4"));
    ContType.insert(std::make_pair("vnd.sealed.swf", "video/vnd.sealed.swf"));
    ContType.insert(std::make_pair("vnd.sealedmedia.softseal.mov", "video/vnd.sealedmedia.softseal.mov"));
    ContType.insert(std::make_pair("vnd.uvvu.mp4", "video/vnd.uvvu.mp4"));
    ContType.insert(std::make_pair("vnd.youtube.yt", "video/vnd.youtube.yt"));
    ContType.insert(std::make_pair("vnd.vivo", "video/vnd.vivo"));
    ContType.insert(std::make_pair("VP8", "video/VP8"));
    ContType.insert(std::make_pair("VP9", "video/VP9"));

    // multipart
    ContType.insert(std::make_pair("alternative", "multipart/alternative"));
    ContType.insert(std::make_pair("appledouble", "multipart/appledouble"));
    ContType.insert(std::make_pair("byteranges", "multipart/byteranges"));
    ContType.insert(std::make_pair("digest", "multipart/digest"));
    ContType.insert(std::make_pair("encrypted", "multipart/encrypted"));
    ContType.insert(std::make_pair("example", "multipart/example"));
    ContType.insert(std::make_pair("form-data", "multipart/form-data"));
    ContType.insert(std::make_pair("header-set", "multipart/header-set"));
    ContType.insert(std::make_pair("mixed", "multipart/mixed"));
    ContType.insert(std::make_pair("multilingual", "multipart/multilingual"));
    ContType.insert(std::make_pair("parallel", "multipart/parallel"));
    ContType.insert(std::make_pair("related", "multipart/related"));
    ContType.insert(std::make_pair("report", "multipart/report"));
    ContType.insert(std::make_pair("signed", "multipart/signed"));
    ContType.insert(std::make_pair("vnd.bint.med-plus", "multipart/vnd.bint.med-plus"));
    ContType.insert(std::make_pair("voice-message", "multipart/voice-message"));
    ContType.insert(std::make_pair("x-mixed-replace", "multipart/x-mixed-replace"));

    return (ContType);
}
